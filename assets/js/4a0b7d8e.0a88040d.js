"use strict";(self.webpackChunkbioinfotech=self.webpackChunkbioinfotech||[]).push([[786],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>u});var t=a(7294);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=t.createContext({}),c=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},p=function(e){var n=c(e.components);return t.createElement(o.Provider,{value:n},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),g=c(a),d=l,u=g["".concat(o,".").concat(d)]||g[d]||m[d]||r;return a?t.createElement(u,s(s({ref:n},p),{},{components:a})):t.createElement(u,s({ref:n},p))}));function u(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=a.length,s=new Array(r);s[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i[g]="string"==typeof e?e:l,s[1]=i;for(var c=2;c<r;c++)s[c]=a[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1212:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var t=a(7462),l=(a(7294),a(3905));const r={},s="\u6587\u7ae0\u590d\u73b0",i={unversionedId:"\u5e38\u7528\u5206\u6790\u6d41\u7a0b\u53ca\u6559\u7a0b/\u590d\u73b0",id:"\u5e38\u7528\u5206\u6790\u6d41\u7a0b\u53ca\u6559\u7a0b/\u590d\u73b0",title:"\u6587\u7ae0\u590d\u73b0",description:"\u6765\u81ea @\u751f\u4fe1\u6280\u80fd\u6811",source:"@site/docs/04-\u5e38\u7528\u5206\u6790\u6d41\u7a0b\u53ca\u6559\u7a0b/\u590d\u73b0.md",sourceDirName:"04-\u5e38\u7528\u5206\u6790\u6d41\u7a0b\u53ca\u6559\u7a0b",slug:"/\u5e38\u7528\u5206\u6790\u6d41\u7a0b\u53ca\u6559\u7a0b/\u590d\u73b0",permalink:"/BioinfoTech/\u5e38\u7528\u5206\u6790\u6d41\u7a0b\u53ca\u6559\u7a0b/\u590d\u73b0",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04-\u5e38\u7528\u5206\u6790\u6d41\u7a0b\u53ca\u6559\u7a0b/\u590d\u73b0.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u5982\u4f55\u4e0b\u8f7d TCGA \u7684\u6570\u636e",permalink:"/BioinfoTech/\u5e38\u7528\u5206\u6790\u6d41\u7a0b\u53ca\u6559\u7a0b/\u4e0b\u8f7dTCGA\u6570\u636e"},next:{title:"\u5355\u7ec6\u80de\u6570\u636e\uff08loom\uff09\u7684\u62df\u65f6\u5e8f\u5206\u6790",permalink:"/BioinfoTech/\u5e38\u7528\u5206\u6790\u6d41\u7a0b\u53ca\u6559\u7a0b/\u62df\u65f6\u5e8f\u5206\u6790"}},o={},c=[{value:"Step 1. \u5355\u7ec6\u80de\u6570\u636e\u5904\u7406",id:"step-1-\u5355\u7ec6\u80de\u6570\u636e\u5904\u7406",level:2},{value:"1.1 QC",id:"11-qc",level:3},{value:"1.2 \u7528 harmony \u53bb\u9664\u6279\u6b21\u6548\u5e94",id:"12-\u7528-harmony-\u53bb\u9664\u6279\u6b21\u6548\u5e94",level:3},{value:"1.3 \u7ec6\u80de\u6ce8\u91ca",id:"13-\u7ec6\u80de\u6ce8\u91ca",level:3},{value:"1.4 \u9274\u5b9a\u5173\u952e\u7ec6\u80de\u7c7b\u578b",id:"14-\u9274\u5b9a\u5173\u952e\u7ec6\u80de\u7c7b\u578b",level:3},{value:"1.5 \u5355\u7ec6\u80de\u901a\u8def\u5bcc\u96c6",id:"15-\u5355\u7ec6\u80de\u901a\u8def\u5bcc\u96c6",level:3},{value:"1.6 \u62df\u65f6\u5e8f\u5206\u6790",id:"16-\u62df\u65f6\u5e8f\u5206\u6790",level:3},{value:"1.7 \u7ec6\u80de\u901a\u8baf",id:"17-\u7ec6\u80de\u901a\u8baf",level:3},{value:"Step 2. TCGA \u5dee\u5f02\u5206\u6790",id:"step-2-tcga-\u5dee\u5f02\u5206\u6790",level:2},{value:"Step 3. WGCNA \u5206\u6790",id:"step-3-wgcna-\u5206\u6790",level:2},{value:"Step 4. \u975e\u8d1f\u77e9\u9635\u5206\u89e3\u7b97\u6cd5",id:"step-4-\u975e\u8d1f\u77e9\u9635\u5206\u89e3\u7b97\u6cd5",level:2},{value:"4.1 NMF \u7b97\u6cd5\u5bf9\u6837\u672c\u5206\u7c7b",id:"41-nmf-\u7b97\u6cd5\u5bf9\u6837\u672c\u5206\u7c7b",level:3},{value:"4.2 \u751f\u5b58\u5206\u6790",id:"42-\u751f\u5b58\u5206\u6790",level:3},{value:"4.3 \u514d\u75ab\u6d78\u6da6",id:"43-\u514d\u75ab\u6d78\u6da6",level:3},{value:"4.4 \u6279\u91cf\u5355\u56e0\u7d20 Cox \u56de\u5f52",id:"44-\u6279\u91cf\u5355\u56e0\u7d20-cox-\u56de\u5f52",level:3},{value:"Step 5. \u9884\u540e\u6a21\u578b\u6784\u5efa\u548c\u9a8c\u8bc1",id:"step-5-\u9884\u540e\u6a21\u578b\u6784\u5efa\u548c\u9a8c\u8bc1",level:2},{value:"Step 6. riskScore \u548c\u4e34\u5e8a\u4fe1\u606f\u7684\u76f8\u5173\u6027",id:"step-6-riskscore-\u548c\u4e34\u5e8a\u4fe1\u606f\u7684\u76f8\u5173\u6027",level:2},{value:"Step 7. \u9ad8\u4f4e\u98ce\u9669\u7ec4\u95f4\u7684\u514d\u75ab\u6d78\u6da6",id:"step-7-\u9ad8\u4f4e\u98ce\u9669\u7ec4\u95f4\u7684\u514d\u75ab\u6d78\u6da6",level:2}],p={toc:c},g="wrapper";function m(e){let{components:n,...r}=e;return(0,l.kt)(g,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"\u6587\u7ae0\u590d\u73b0"},"\u6587\u7ae0\u590d\u73b0"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u6765\u81ea ",(0,l.kt)("a",{parentName:"p",href:"https://mp.weixin.qq.com/s/khT12emu_AE1KkSsqih1BA"},"@\u751f\u4fe1\u6280\u80fd\u6811"))),(0,l.kt)("p",null,"Integration of Single-Cell RNA Sequencing and Bulk RNA Sequencing Data to Establish and Validate a Prognostic Model for Patients With Lung Adenocarcinoma"),(0,l.kt)("p",null,"\u5168\u6587\u6570\u636e\u5206\u6790\uff0c\u6ca1\u6709\u6e7f\u5b9e\u9a8c\u3002\u5728 GEO \u6570\u636e\u5e93\u4e0b\u8f7d\u4e86\u4e00\u4efd scRNA \u7684\u6570\u636e\uff0c\u4e24\u4efd\u57fa\u56e0\u82af\u7247\u7684\u6570\u636e\uff0c\u8fd8\u4e0b\u8f7d\u4e86 TCGA \u7684\u6570\u636e\u3002\u7814\u7a76\u80ba\u817a\u764c\uff08LUAD\uff09\uff0c\u6574\u5408 scRNA-seq \u548c\u4f20\u7edf\u7684 RNA-seq \u6570\u636e\u6765\u6784\u5efa LUAD \u60a3\u8005\u7684\u9884\u540e\u6a21\u578b\uff0c\u5e76\u91c7\u7528\u4e24\u4e2a\u5916\u90e8\u9a8c\u8bc1\u961f\u5217\u6765\u9a8c\u8bc1\u5176\u98ce\u9669\u5206\u5c42\u80fd\u529b\u3002"),(0,l.kt)("p",null,"\u6587\u7ae0\u6574\u4f53\u601d\u8def\u5982\u4e0b\uff1a"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u5355\u7ec6\u80de\u964d\u7ef4\u5206\u7fa4\u6ce8\u91ca\uff0c\u627e\u51fa tumor \u548c normal \u95f4\u5173\u952e\u7ec6\u80de\u7c7b\u578b\u3002\u5355\u7ec6\u80de\u529f\u80fd\u5bcc\u96c6\uff0c\u62df\u65f6\u5e8f\u5206\u6790\uff0c\u7ec6\u80de\u901a\u8baf\u5206\u6790"),(0,l.kt)("li",{parentName:"ol"},"TCGA \u6570\u636e\u8fdb\u884c\u5dee\u5f02\u5206\u6790\uff0cGO\uff0cKEGG \u529f\u80fd\u5bcc\u96c6"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"TCGA \u6570\u636e\u8fdb\u884c WGCNA \u5206\u6790\uff0c\u627e\u5230 hub gene \u540e\uff0c\u53d6 hub gene \u548c TCGA DEGs \u7684\u4ea4\u96c6\uff0c\u8fdb\u884c\u540e\u7eed\u5206\u6790")),(0,l.kt)("li",{parentName:"ol"},"\u5355\u56e0\u7d20 Cox \u56de\u5f52\u9274\u5b9a\u6f5c\u5728\u7684\u9884\u540e DEGs\uff0c\u975e\u8d1f\u77e9\u9635\u5206\u89e3\u8fdb\u884c sample clustering\uff08\u4e9a\u578b\uff09\uff0c\u4e0d\u540c cluster \u7684\u751f\u5b58\u5206\u6790\uff0c\u514d\u75ab\u6d78\u6da6\u5206\u6790"),(0,l.kt)("li",{parentName:"ol"},"\u5355\u56e0\u7d20 Cox \u56de\u5f52\u7b5b\u9009\u51fa\u7684 gene \u7528 LASSO \u6a21\u578b\u8fdb\u4e00\u6b65\u7b5b\u9009\uff0c\u7b5b\u9009\u5b8c\u540e\u8fdb\u884c\u591a\u56e0\u7d20 Cox \u56de\u5f52\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u6837\u672c\u7684 risk score\uff0c\u6839\u636e risk score \u5206\u6210\u4e24\u7c7b\uff0c\u8fdb\u884c\u751f\u5b58\u5206\u6790\uff0c\u5c06\u6784\u5efa\u7684\u6a21\u578b\u5e94\u7528\u4e8e\u4e24\u4e2a GEO \u82af\u7247\u6570\u636e\uff0c\u8fdb\u884c\u540c\u6837\u5206\u6790"),(0,l.kt)("li",{parentName:"ol"},"\u9ad8\u5371\u4f4e\u5371\u4eba\u7fa4\u4e0e\u4e34\u5e8a\u4fe1\u606f\u76f8\u5173\u6027\u5206\u6790\uff0c\u5206\u6790 risk score \u662f\u5426\u53ef\u4f5c\u4e3a\u9884\u540e\u6307\u6807\uff0c\u57fa\u56e0\u7a81\u53d8\u5206\u6790"),(0,l.kt)("li",{parentName:"ol"},"ssGSEA \u5206\u6790\uff0c\u514d\u75ab\u68c0\u67e5\u70b9\u4e0e\u80bf\u7624\u7a81\u53d8\u8d1f\u8377\u5206\u6790")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u672c\u6b21\u590d\u73b0\u53ea\u662f\u4e3a\u4e86\u590d\u73b0\u56fe\u8868\uff0c\u6570\u636e\u4e0d\u4e00\u5b9a\u5177\u6709\u751f\u7269\u5b66\u610f\u4e49\uff08\u5927\u5bb6\u53ef\u4ee5\u7406\u89e3\u4e3a\u51d1\u56fe\u6216\u8005\u704c\u6c34\uff09")),(0,l.kt)("h2",{id:"step-1-\u5355\u7ec6\u80de\u6570\u636e\u5904\u7406"},"Step 1. \u5355\u7ec6\u80de\u6570\u636e\u5904\u7406"),(0,l.kt)("p",null,"\u5148\u4e0b\u8f7d\u597d\u6570\u636e\uff0c\u4e00\u5171 4 \u4e2a\u6837\u672c\u5c31\u65b0\u5efa 4 \u4e2a\u6587\u4ef6\u5939\uff0c\u540d\u5b57\u547d\u540d\u6210\u6837\u672c\u540d\uff0c\u6587\u4ef6\u5939\u5185\u5e26'GSM'\u5f00\u5934\u7684\u6570\u636e\u662f\u4e0b\u8f7d\u7684\u539f\u59cb\u6570\u636e\uff0c\u91cd\u65b0\u590d\u5236\u4e00\u4efd\uff0c\u628a\u6587\u4ef6\u540d\u6539\u6210\u6807\u51c6\u7684 read10x \u51fd\u6570\u8bfb\u5165\u683c\u5f0f\uff0c\u4e00\u5b9a\u6ce8\u610f\u540d\u5b57\u4e0d\u8981\u5199\u9519\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509172810401",src:a(2228).Z,width:"737",height:"540"})),(0,l.kt)("p",null,"\u4e00\u5b9a\u8981\u4fdd\u8bc1\u8fd9 3 \u4e2a\u6587\u4ef6\u540c\u65f6\u5b58\u5728\uff0c\u800c\u4e14\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\u9762\u3002"),(0,l.kt)("p",null,"\u793a\u4f8b\u4ee3\u7801\u662f\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"rm(list=ls())\noptions(stringsAsFactors = F)\nlibrary(Seurat)\nsce1 <- CreateSeuratObject(Read10X('../10x-results/WT/'), \"wt\")\n")),(0,l.kt)("p",null,"\u91cd\u70b9\u5c31\u662f Read10X \u51fd\u6570\u8bfb\u53d6 \u6587\u4ef6\u5939\u8def\u5f84\uff0c\u6bd4\u5982\uff1a",(0,l.kt)("strong",{parentName:"p"},"../10x-results/WT/")," \uff0c\u4fdd\u8bc1\u6587\u4ef6\u5939\u4e0b\u9762\u6709 3 \u4e2a\u6587\u4ef6\u3002"),(0,l.kt)("h3",{id:"11-qc"},"1.1 QC"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"library(Seurat)\nlibrary(harmony)\nlibrary(dplyr)\nlibrary(stringr)\nrm(list = ls())\n# \u591a\u4e2a\u6570\u636e\u8bfb\u53d6\u4e0e\u5408\u5e76\nrawdata_path <- './rawdata'\nfilename <- list.files(rawdata_path)\nrawdata_path <- paste(rawdata_path,filename,sep = '/')\nsceList <- lapply(rawdata_path, function(x){\n  obj <- CreateSeuratObject(counts = Read10X(x),\n                            project = str_split(x,'/')[[1]][3])\n})\nnames(sceList) <- filename\n")),(0,l.kt)("p",null,"\u8fd9\u91cc sceList \u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u91cc\u5171 4 \u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a seurat \u5bf9\u8c61\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u540d\u5b57\u5c31\u662f\u4e0a\u9762\u7684\u6837\u672c\u540d\u3002rawdata","_","path \u5c31\u662f\u4e0a\u9762\u4e0b\u8f7d\u7684\u3002gz \u6587\u4ef6 \u6240\u5728\u6587\u4ef6\u5939\u7684\u8def\u5f84\uff0cRead10X \u51fd\u6570\u53ea\u9700\u8981\u4f20\u5165\u6587\u4ef6\u5939\u8def\u5f84\u5c31\u53ef\u4ee5\u81ea\u52a8\u8bfb\u5165\u6570\u3002\nproject \u53c2\u6570\u4f20\u5165\u7684\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e00\u822c\u7528\u6837\u672c\u540d\u5373\u53ef\uff0c\u8fd9\u91cc\u7528 str","_","split \u51fd\u6570\u5206\u5272\u8def\u5f84\u5b57\u7b26\u4e32\u5f97\u5230\u6837\u672c\u540d"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"sce <- merge(sceList[[1]],sceList[-1],add.cell.ids = names(sceList),project = 'luad')\nsce@meta.data$group <- str_split(sce@meta.data$orig.ident,'_',simplify = T)[,2]\n")),(0,l.kt)("p",null,"\u628a 4 \u4e2a seurat \u5bf9\u8c61\u7528 merge \u51fd\u6570\u5408\u5e76\u540e\uff0c\u770b\u4e00\u4e0b\u6bcf\u4e2a\u7ec6\u80de\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u8fd9\u91cc\u6211\u6839\u636e\u4f5c\u8005\u7ed9\u51fa\u7684\u4fe1\u606f\uff0c\u628a\u75be\u75c5\u548c\u6b63\u5e38\u5206\u6210\u4e24\u7ec4\uff0c\u53c8\u589e\u52a0\u4e86\u4e00\u5217\uff0cade1 \u662f\u75be\u75c5\uff0cnor \u662f\u6b63\u5e38"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509173051298",src:a(7598).Z,width:"731",height:"622"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u67e5\u770b\u7ebf\u7c92\u4f53 (MT \u5f00\u5934\uff09\u3001\u6838\u7cd6\u4f53 (RPS/RPL \u5f00\u5934\uff09\u3001\u8840\u7ea2\u7ec6\u80de\u6240\u5360\u6bd4\u4f8b\n\ngrep('^MT',x=rownames(sce@assays$RNA@data),value = T)\ngrep('^RP[SL]',x=rownames(sce@assays$RNA@data),value = T)\ngrep('^HB[^(P)]',x=rownames(sce@assays$RNA@data),value = T)\n\nsce <- PercentageFeatureSet(sce,'^MT',col.name = 'percent_MT')\nsce <- PercentageFeatureSet(sce,'^RP[SL]',col.name = 'percent_RP')\nsce <- PercentageFeatureSet(sce,'^HB[^(P)]',col.name = 'percent_HB')\nVlnPlot(sce,features = \"nCount_RNA\",pt.size = 0,y.max = 10000)\n\nVlnPlot(sce,features = \"nFeature_RNA\",pt.size = 0,y.max = 2500)\nVlnPlot(sce,features = \"percent_MT\",pt.size = 0)\nVlnPlot(sce,features = \"percent_RP\",pt.size = 0)\nVlnPlot(sce,features = \"percent_HB\",pt.size = 0,y.max = 0.1)\nVlnPlot(sce,features = c(\"nCount_RNA\",\"nFeature_RNA\",\"percent_MT\"),pt.size = 0,group.by = 'orig.ident')\n")),(0,l.kt)("p",null,"\u5bf9\u4e8e\u6bcf\u4e2a\u7ec6\u80de\uff0c\u6211\u53c8\u6dfb\u52a0\u4e86\u4e09\u5217\u4fe1\u606f\uff1a\u7ebf\u7c92\u4f53\u57fa\u56e0\u5360\u6bd4\uff0c\u6838\u7cd6\u4f53\u57fa\u56e0\u5360\u6bd4\uff0c\u7ea2\u7ec6\u80de\u57fa\u56e0\u5360\u6bd4\u3002\u8fd9\u51e0\u5217\u7528\u6765\u8fc7\u6ee4\u6570\u636e\uff0c\u8fd9\u91cc\u91cd\u65b0\u7ed9 sce \u8d4b\u503c\u662f\u56e0\u4e3a\uff0cPercentageFeatureSet \u51fd\u6570\u7684\u8fd4\u56de\u503c\u8fd8\u662f\u4e00\u4e2a seurat \u5bf9\u8c61\uff0c\u548c\u539f\u6765\u7684 sce \u76f8\u6bd4\uff0c \u5c31\u53ea\u662f\u5728 meta data \u91cc\u591a\u4e86\u4e00\u5217\u800c\u5df2\uff0c\u6240\u4ee5\u76f4\u63a5\u91cd\u65b0\u8d4b\u503c\uff0c\u628a\u539f\u6765\u7684 seurat \u5bf9\u8c61 sce \u7ed9\u66f4\u65b0\u6389"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509173202048",src:a(7232).Z,width:"739",height:"1264"})),(0,l.kt)("p",null,"\u8fc7\u6ee4\u524d\u5148 ",(0,l.kt)("inlineCode",{parentName:"p"},"dim(sce)")," \u770b\u4e0b\u6570\u636e\uff0c32538 \u4e2a gene\uff0c13060 \u4e2a\u7ec6\u80de"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u8fc7\u6ee4\u7ec6\u80de\nsce <- subset(sce,subset = nCount_RNA>1000 & nFeature_RNA>300 & percent_MT<25)\n# \u8fc7\u6ee4\u57fa\u56e0\nsce <- sce[rowSums(sce@assays$RNA@counts>0)>3,]\n# \u8fc7\u6ee4\u7ebf\u7c92\u4f53\u3001\u6838\u7cd6\u4f53\u3001\u8840\u7ea2\u7ec6\u80de\u8fdb\u5360\u6bd4\u9ad8\u7684\u7ec6\u80de\nsce <- subset(sce,subset = percent_MT<25 & percent_RP<30 & percent_HB<0.1)\n")),(0,l.kt)("p",null,"\u8fc7\u6ee4\u5b8c\u540e 22249 \u4e2a gene\uff0c7892 \u4e2a\u7ec6\u80de"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u7ec6\u80de\u5468\u671f\u8bc4\u5206\n# S.Score \u8f83\u9ad8\u7684\u4e3a S \u671f\uff0cG2M.Score \u8f83\u9ad8\u7684\u4e3a G2M \u671f\uff0c\u90fd\u6bd4\u8f83\u4f4e\u7684\u4e3a G1 \u671f\ns_feature <- cc.genes.updated.2019$s.genes\ng2m_feature <- cc.genes.updated.2019$g2m.genes\nsce <- CellCycleScoring(sce,\n                        s.features = s_feature,\n                        g2m.features = g2m_feature,\n                        set.ident = T)\nVlnPlot(sce,features = c('S.Score','G2M.Score'),group.by = 'orig.ident',pt.size = 0)\nsaveRDS(sce,'sce_qc.rds')\n")),(0,l.kt)("p",null,"\u518d\u770b\u4e00\u4e0b\u7ec6\u80de\u5468\u671f\uff0c\u628a\u7ec6\u80de\u5468\u671f\u4e24\u4e2a\u8bc4\u5206\u52a0\u5230 meta data \u91cc\uff0c\u66f4\u65b0 sce"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509173319035",src:a(8413).Z,width:"739",height:"553"})),(0,l.kt)("h3",{id:"12-\u7528-harmony-\u53bb\u9664\u6279\u6b21\u6548\u5e94"},"1.2 \u7528 harmony \u53bb\u9664\u6279\u6b21\u6548\u5e94"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"library(harmony)\nlibrary(dplyr)\nlibrary(Seurat)\nlibrary(clustree)\nrm(list = ls())\n\nsce <- readRDS('sce_qc.rds')\nsce <- NormalizeData(sce,\n                     normalization.method = 'LogNormalize',\n                     scale.factor = 10000)\nsce <- FindVariableFeatures(sce,\n                            selection.method = \"vst\",\n                            nfeatures = 2000)\n# \u9ed8\u8ba4\u7528 variableFeature \u505a scale\nsce <- ScaleData(sce)\nsce <- RunPCA(sce,features = VariableFeatures(sce))\nDimPlot(sce,reduction = 'pca',group.by = 'group')\n")),(0,l.kt)("p",null,"\u4ece PCA \u964d\u7ef4\u7684\u7ed3\u679c\u770b\uff0c\u4e24\u4e2a\u7ec4\u7684\u6279\u6b21\u6548\u5e94\u4e0d\u5927\uff0c\u5747\u5300\u7684\u6df7\u5408\u5728\u4e00\u8d77\uff0c\u4f46\u662f\u8fd9\u91cc\u8fd8\u662f\u7528 harmony \u8bd5\u8bd5"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509173416747",src:a(3533).Z,width:"739",height:"573"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"sce <- RunHarmony(sce,group.by.vars = 'orig.ident')\n\nElbowPlot(sce,reduction = 'harmony')\nsce <- RunUMAP(sce,dims = 1:10,reduction = 'harmony')\nsce <- RunTSNE(sce,dims = 1:10,reduction = 'harmony')\nDimPlot(sce,reduction = 'umap',label = T,group.by = 'group')\nDimPlot(sce,reduction = 'tsne',label = T,group.by = 'group')\n")),(0,l.kt)("p",null,"\u9009\u62e9 orig.ident \u8fd9\u4e00\u5217\uff0c\u53bb\u9664 4 \u4e2a\u6837\u672c\u4e4b\u95f4\u7684\u6279\u6b21\u6548\u5e94\u3002\u6839\u636e\u8098\u90e8\u56fe\u786e\u5b9a\u964d\u7ef4\u540e\u7684\u7ef4\u5ea6\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509173455682",src:a(7715).Z,width:"752",height:"1164"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"sce <- FindNeighbors(sce,reduction = 'harmony',dims = 1:10)\nsce_res <- FindClusters(sce_res,resolution = 0.8)\n# \u8bbe\u7f6e\u4e0d\u540c\u7684\u5206\u8fa8\u7387\u67e5\u770b\u5206\u7ec4\u60c5\u51b5\nsce_res <- sce\nfor (i in c(0.01, 0.05, 0.1, 0.2, 0.3, 0.5,0.8,1)){\n  sce_res <- FindClusters(sce_res,resolution = i)\n}\nclustree(sce_res,prefix = 'RNA_snn_res.')\n")),(0,l.kt)("p",null,"FindNeighbors \u51fd\u6570\u8ba1\u7b97\u7ec6\u80de\u95f4\u7684\u8ddd\u79bb\uff0cFindClusters \u51fd\u6570\u786e\u5b9a\u5206\u7fa4\u7ed3\u679c\u3002\u4e0a\u9762\u7684 UMAP \u770b\u7740\u5927\u6982\u5206\u4e86 7 \u5768\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f 7 \u4e2a\u5206\u7fa4\uff0c\u5b9e\u9645\u5206\u7fa4\u6570\u91cf\u8fd8\u662f\u8981\u770b FindClusters \u7684\u7ed3\u679c\u3002FindClusters \u51fd\u6570\u5206\u8fa8\u7387\u4e0d\u540c\uff0c\u5206\u7fa4\u6570\u91cf\u4f1a\u4e0d\u540c\uff0c\u5177\u4f53\u5206\u591a\u5c11\u9700\u8981\u6478\u7d22\u3002\u8fd9\u91cc\u5206\u8fa8\u7387\u9009\u4e86 0.5\uff0c\u5bf9\u5e94\u7b2c\u516d\u884c\u84dd\u8272\uff0c13 \u4e2a\u5206\u7fa4\uff0c\u5982\u679c\u9009 0.8 \u7684\u8bdd\uff0c\u611f\u89c9\u5206\u7fa4\u6570\u91cf\u4f1a\u7a81\u7136\u589e\u52a0\u597d\u591a\uff0c\u4e0d\u592a\u5408\u9002\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509173520803",src:a(855).Z,width:"748",height:"587"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"sce <- FindClusters(sce,resolution = 0.5)\nsaveRDS(sce,file = 'step2_harmony.rds')\n\nDimPlot(sce,reduction = 'umap',group.by = 'orig.ident')\nDimPlot(sce,reduction = 'umap',group.by = 'seurat_clusters')\n")),(0,l.kt)("p",null,"\u786e\u5b9a\u597d\u5206\u8fa8\u7387\u540e\uff0c\u5206\u7fa4\u8d4b\u503c\u7ed9 sce\uff0c\u5728 meta data \u91cc\u4f1a\u591a\u51fa\u6765\u4e24\u5217\uff0c\u8fd9\u4e24\u5217\u662f\u4e00\u6837\u7684\uff0c\u8868\u793a\u6bcf\u4e2a\u7ec6\u80de\u5206\u5728\u54ea\u4e2a cluster \u91cc\uff0c\u6700\u540e\u4fdd\u5b58\u4e00\u4e0b\u66f4\u65b0\u540e\u7684 sce \u5bf9\u8c61\uff0c\u518d\u6765\u770b\u4e0b\u5206\u7fa4\u7ed3\u679c"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509173607692",src:a(363).Z,width:"748",height:"1291"})),(0,l.kt)("h3",{id:"13-\u7ec6\u80de\u6ce8\u91ca"},"1.3 \u7ec6\u80de\u6ce8\u91ca"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"library(SingleR)\nlibrary(celldex)\nlibrary(Seurat)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(pheatmap)\nlibrary(ReactomeGSA)\nlibrary(monocle)\nlibrary(limma)\nlibrary(ggplot2)\nlibrary(msigdbr)\nlibrary(singleseqgset)\n\nrm(list = ls())\ngc()\n\nsce <- readRDS('step2_harmony.rds')\n# singleR \u6ce8\u91ca\nhpca.se <- HumanPrimaryCellAtlasData()\nbpe.se <- BlueprintEncodeData()\nanno <- SingleR(sce@assays$RNA@data,\n                ref = list(BP=bpe.se,HPCA=hpca.se),\n                labels = list(bpe.se$label.main,hpca.se$label.main),\n                clusters = sce@meta.data$seurat_clusters\n                )\n")),(0,l.kt)("p",null,"\u7528 SingleR \u81ea\u52a8\u6ce8\u91ca\uff0cHumanPrimaryCellAtlasData \u548c BlueprintEncodeData \u662f SingleR \u81ea\u5e26\u7684\u4e24\u4e2a\u6570\u636e\u5e93\uff0c\u7528\u4e24\u4e2a\u6570\u636e\u5e93\u6ce8\u91ca\u6548\u679c\u597d\u50cf\u6bd4\u4e00\u4e2a\u4f1a\u597d\u70b9\u3002\u5f97\u5230\u7684 anno \u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u7ec6\u80de\u7fa4\u7684\u6ce8\u91ca\u4fe1\u606f\u5c31\u85cf\u5728\u91cc\u9762\uff0c13 \u4e2a\u5206\u7fa4\u88ab\u6ce8\u91ca\u6210 7 \u79cd\u7ec6\u80de\uff0c\u5176\u4e2d\u6709 6 \u4e2a\u5206\u7fa4\u90fd\u662f\u4e0a\u76ae\u7ec6\u80de\uff0c\u4e5f\u8bb8\u4e0a\u76ae\u7ec6\u80de\u8fd8\u80fd\u7ee7\u7eed\u7ec6\u5206\u3002\u60f3\u7ee7\u7eed\u7ec6\u5206\u7684\u8bdd\uff0c\u5bf9 sce \u53d6\u5b50\u96c6\uff0c\u628a\u6807\u7b7e\u4e3a\u4e0a\u76ae\u7ec6\u80de\u7684\u7ec6\u80de\u53d6\u51fa\u6765\uff0c\u964d\u7ef4\u5206\u7fa4\uff0c\u4e22\u5230 SingleR() \u51fd\u6570\u91cc\u518d\u6ce8\u91ca"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"table(anno$labels)\nplotScoreHeatmap(anno,clusters = anno@rownames,show_colnames = T)\n")),(0,l.kt)("p",null,"\u518d\u770b\u4e0b\u6ce8\u91ca\u7ed3\u679c\u7684\u6253\u5206\uff0c\u4e0d\u6ee1\u610f\u7684\u8bdd\u4e5f\u53ef\u4ee5\u624b\u52a8\u6ce8\u91ca"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509173852273",src:a(831).Z,width:"748",height:"467"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"sce@meta.data$singleR_label <- unlist(lapply(sce@meta.data$seurat_clusters, function(x){anno$labels[x]}))\nDimPlot(sce,reduction = 'umap',group.by = 'singleR_label',label = T)\nDimPlot(sce,reduction = 'tsne',group.by = 'singleR_label',label = T)\n")),(0,l.kt)("p",null,"anno \u91cc\u9762\u6709\u6bcf\u4e2a\u5206\u7fa4\u5bf9\u5e94\u7684\u6ce8\u91ca\u4fe1\u606f\uff0c\u628a\u8fd9\u4e2a\u4fe1\u606f\u6dfb\u52a0\u5230 sce \u7684 meta data \u91cc\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5728\u5206\u7fa4\u7684\u56fe\u4e0a\u6dfb\u52a0\u4e0a\u6ce8\u91ca\u4fe1\u606f\u4e86"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"anno$labels\nanno@rownames\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509174029821",src:a(476).Z,width:"748",height:"1164"})),(0,l.kt)("h3",{id:"14-\u9274\u5b9a\u5173\u952e\u7ec6\u80de\u7c7b\u578b"},"1.4 \u9274\u5b9a\u5173\u952e\u7ec6\u80de\u7c7b\u578b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"cell_list <- split(colnames(sce), sce$singleR_label)\n\ndeg <- c()\nfor (i in names(cell_list)){\n  sce_temp <- sce[,colnames(sce) %in% cell_list[[i]]]\n  sce_temp <- CreateSeuratObject(counts = sce_temp@assays$RNA@counts,\n                                 meta.data = sce_temp@meta.data,\n                                 min.cells = 3,\n                                 min.features = 200)\n  sce_temp <- NormalizeData(sce_temp)\n  sce_temp <- FindVariableFeatures(sce_temp)\n  sce_temp <- ScaleData(sce_temp,vars.to.regress = c('nFeature_RNA','\"percent_MT\"'))\n  Idents(sce_temp) <- sce_temp$group\n  sce_temp_markers <- FindAllMarkers(object=sce_temp,\n                                     only.pos = T,\n                                     logfc.threshold = 2,\n                                     min.pct = 0.1)\n  sce_temp_markers <- sce_temp_markers[order(sce_temp_markers$cluster,sce_temp_markers$avg_log2FC),]\n  deg_gene <- sce_temp_markers[sce_temp_markers$p_val_adj<0.05,'gene']\n  deg <- c(deg,length(deg_gene))\n}\n\ndf <- data.frame(cell_type = names(cell_list),deg_gene = deg)\n")),(0,l.kt)("p",null,"\u628a\u6bcf\u79cd\u7c7b\u578b\u7684\u7ec6\u80de\u5206\u522b\u62ff\u51fa\u6765\uff0c\u7528 FindAllMarkers \u627e\u51fa ade1 \u548c nor \u7ec4\u4e4b\u95f4\u7684\u5dee\u5f02\u57fa\u56e0\uff01","[\u56fe\u7247]","(data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='",(0,l.kt)("a",{parentName:"p",href:"http://www.w3.org/2000/svg'"},"http://www.w3.org/2000/svg'")," xmlns:xlink='",(0,l.kt)("a",{parentName:"p",href:"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg"},"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg")," stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)"),(0,l.kt)("h3",{id:"15-\u5355\u7ec6\u80de\u901a\u8def\u5bcc\u96c6"},"1.5 \u5355\u7ec6\u80de\u901a\u8def\u5bcc\u96c6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"temp <- sce\nIdents(temp) <- temp@meta.data$singleR_label\nreactome_obj <- analyse_sc_clusters(temp,create_reactome_visualization=T,use_interactors=F)\npath_ways <- pathways(reactome_obj)\npath_ways$diff <- rowMax(as.matrix(path_ways[,2:ncol(path_ways)])) - rowMin(as.matrix(path_ways[,2:ncol(path_ways)]))\npath_ways <- path_ways[order(path_ways$diff,decreasing = T),]\n\nplot_gsva_heatmap(reactome_obj,rownames(path_ways)[1:10],margins = c(10,20))\n\nsaveRDS(sce,file = 'step3_sce.rds')\n")),(0,l.kt)("p",null,"\u7528 pathway() \u63d0\u53d6\u5bcc\u96c6\u51fa\u6765\u7684\u7ed3\u679c\uff0c\u6bcf\u884c\u662f\u4e00\u4e2a\u901a\u8def\uff0c\u6bcf\u5217\u662f\u4e00\u79cd\u7ec6\u80de\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u901a\u8def\u5728 7 \u79cd\u7ec6\u80de\u4e2d\u8868\u8fbe\u5dee\u5f02\u7684 diff\uff0c\u6839\u636e diff \u6392\u5e8f\uff0c\u753b\u51fa\u524d 10 \u4e2a\u901a\u8def"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509174111595",src:a(3131).Z,width:"756",height:"819"})),(0,l.kt)("h3",{id:"16-\u62df\u65f6\u5e8f\u5206\u6790"},"1.6 \u62df\u65f6\u5e8f\u5206\u6790"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"library(Seurat)\nlibrary(monocle)\n\nsce <- readRDS('step3_sce.rds')\n\n# 1. \u5c06 seurat \u5bf9\u8c61\u8f6c\u5316\u4e3a monocle \u7684 CDS \u5bf9\u8c61\nsparse_data <- as(as.matrix(sce@assays$RNA@counts),'sparseMatrix')\nmdata <- new('AnnotatedDataFrame',data=sce@meta.data) # \u884c\u4e3a cell\nfData <- data.frame(gene_short_name=row.names(sparse_data),row.names = row.names(sparse_data))\nfd <- new('AnnotatedDataFrame',data=fData) # \u884c\u4e3a gene \u5217\u4e3a gene description\nmonocle_cds <- newCellDataSet(cellData = sparse_data,\n                              phenoData = mdata,\n                              featureData = fd,\n                              lowerDetectionLimit = 0.5,\n                              expressionFamily = negbinomial.size())\n# 2. \u8ba1\u7b97 size factor \u548c\u79bb\u6563\u5ea6\nmonocle_cds <- estimateSizeFactors(monocle_cds)\nmonocle_cds <- estimateDispersions(monocle_cds)\n# 3. \u8fc7\u6ee4\u4f4e\u8d28\u91cf\u7ec6\u80de\nmonocle_cds <- detectGenes(monocle_cds,min_expr = 0.1)\n# 4. \u627e\u9ad8\u53d8\u57fa\u56e0\u3001\u964d\u7ef4\u5206\u7fa4\n# \u7528 seurat \u627e\u7684\u9ad8\u53d8\u57fa\u56e0 \nsce_var_gene <- VariableFeatures(sce)\nmonocle_cds <- setOrderingFilter(monocle_cds,sce_var_gene)\nmonocle_cds <- reduceDimension(monocle_cds,num_dim=10,norm_method = 'log',reduction_method = 'tSNE')\nmonocle_cds <- clusterCells(monocle_cds,num_clusters = 10)\nplot_cell_clusters(monocle_cds,color_by = 'singleR_label')\n\ndiff_test_gene <- differentialGeneTest(monocle_cds[sce_var_gene,],fullModelFormulaStr = '~singleR_label')\ndiff_gene <- row.names(subset(diff_test_gene,qval<0.01))\nmonocle_cds <- setOrderingFilter(monocle_cds,diff_gene)\n# 5. \u7528 reversed graph embedding \u964d\u7ef4\nmonocle_cds <- reduceDimension(monocle_cds,reduction_method = 'DDRTree')\n\n# 6. \u8ba1\u7b97\u7ec6\u80de\u62df\u65f6\u95f4\nmonocle_cds <- orderCells(monocle_cds)\n")),(0,l.kt)("p",null,"\u8fd9\u91cc\u8fd0\u884c\u5230\u7b2c\u516d\u6b65\uff0corderCells() \u51fd\u6570\u5927\u6982\u7387\u4f1a\u62a5\u9519\uff0c\u8be6\u7ec6\u7684\u89e3\u51b3\u529e\u6cd5\u53ef\u4ee5\u53c2\u8003\u77e5\u4e4e\u4e0a\u7684\u8d34\u5b50 ",(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/589134519"},"https://zhuanlan.zhihu.com/p/589134519"),"   \uff0c\u8fd9\u91cc\u8bf4\u4e00\u4e0b\u5927\u6982\u89e3\u51b3\u6b65\u9aa4"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"\u4e0b\u8f7d\u4e00\u4e2a\u5305\uff0c\u2018igraph\u2019")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"\u4e0b\u8f7d\u4e00\u4e2a R \u6587\u4ef6\uff0corder","_","cells.R\uff0c\u94fe\u63a5\u5728\u77e5\u4e4e\u8d34\u5b50\u91cc\uff0c\u7136\u540e source \u8c03\u7528")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"\u628a orderCells() \u4e2d\u7528 DDRTree \u8ba1\u7b97\u7684\u90a3\u90e8\u5206\u4ee3\u7801\u5355\u72ec\u62ff\u51fa\u6765\uff0c\u5199\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u540e\u9762\u76f4\u63a5\u8c03\u7528\uff0c\u8bb0\u5f97\u7ed9\u51fa\u8fd4\u56de\u503c\u3002"),"\u6216\u8005\u4e0d\u5c01\u88c5\u6210\u51fd\u6570\u7684\u5f62\u5f0f\u4e5f\u884c\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u8fd4\u56de\u503c\u4e86")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},'# 6. \u8ba1\u7b97\u7ec6\u80de\u62df\u65f6\u95f4\nsource(\'order_cells.R\')\nlibrary(\'igraph\')\nmy_ordercell <- function(cds){\n  root_state = NULL\n  num_paths = NULL\n  reverse = NULL\n  root_cell <- select_root_cell(cds, root_state, reverse)\n  cds@auxOrderingData <- new.env(hash = TRUE)\n  \n  if (cds@dim_reduce_type == "DDRTree") {\n    if (is.null(num_paths) == FALSE) {\n      message("Warning: num_paths only valid for method \'ICA\' in reduceDimension()")\n    }\n    cc_ordering <- extract_ddrtree_ordering(cds, root_cell)\n    pData(cds)$Pseudotime <- cc_ordering[row.names(pData(cds)), ]$pseudo_time\n    K_old <- reducedDimK(cds)\n    old_dp <- cellPairwiseDistances(cds)\n    old_mst <- minSpanningTree(cds)\n    old_A <- reducedDimA(cds)\n    old_W <- reducedDimW(cds)\n    cds <- project2MST(cds, project_point_to_line_segment)\n    minSpanningTree(cds) <- cds@auxOrderingData[[cds@dim_reduce_type]]$pr_graph_cell_proj_tree\n    root_cell_idx <- which(V(old_mst)$name == root_cell, arr.ind = T)\n    cells_mapped_to_graph_root <- which(cds@auxOrderingData[["DDRTree"]]$pr_graph_cell_proj_closest_vertex == root_cell_idx)\n    if (length(cells_mapped_to_graph_root) == 0) {\n      cells_mapped_to_graph_root <- root_cell_idx\n    }\n    cells_mapped_to_graph_root <- V(minSpanningTree(cds))[cells_mapped_to_graph_root]$name\n    tip_leaves <- names(which(degree(minSpanningTree(cds)) == 1))\n    root_cell <- cells_mapped_to_graph_root[cells_mapped_to_graph_root %in% tip_leaves][1]\n    if (is.na(root_cell)) {\n      root_cell <- select_root_cell(cds, root_state, reverse)\n    }\n    cds@auxOrderingData[[cds@dim_reduce_type]]$root_cell <- root_cell\n    cc_ordering_new_pseudotime <- extract_ddrtree_ordering(cds, root_cell)\n    pData(cds)$Pseudotime <- cc_ordering_new_pseudotime[row.names(pData(cds)), ]$pseudo_time\n    if (is.null(root_state) == TRUE) {\n      closest_vertex <- cds@auxOrderingData[["DDRTree"]]$pr_graph_cell_proj_closest_vertex\n      pData(cds)$State <- cc_ordering[closest_vertex[, 1], ]$cell_state\n    }\n  }\n  cds\n}\nmonocle_cds <- my_ordercell(monocle_cds)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u53ef\u4ee5\u753b\u56fe\u4e86\nplot_cell_trajectory(monocle_cds,color_by = 'Pseudotime')\nplot_cell_trajectory(monocle_cds,color_by = 'State')\nplot_cell_trajectory(monocle_cds,color_by = 'singleR_label')\n\nplot_cell_trajectory(monocle_cds,color_by = 'singleR_label')+facet_wrap(~singleR_label,nrow = 3)\n\nsaveRDS(monocle_cds,file = 'monocle.rds')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509174211956",src:a(9017).Z,width:"756",height:"1140"})),(0,l.kt)("h3",{id:"17-\u7ec6\u80de\u901a\u8baf"},"1.7 \u7ec6\u80de\u901a\u8baf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"library(CellChat)\nlibrary(patchwork)\nlibrary(Seurat)\nlibrary(dplyr)\nlibrary(ggalluvial)\nlibrary(NMF)\noptions(stringsAsFactors = FALSE)\nrm(list = ls())\ngc()\n\nsce <- readRDS('step3_sce.rds')\n\n# Step1. \u521b\u5efa cellchat \u5bf9\u8c61\ndata.input <- sce@assays$RNA@data\nmeta.data <- sce@meta.data\n\ncellchat <- createCellChat(object=data.input,\n                           meta = meta.data,\n                           group.by='singleR_label')\ncellchat <- addMeta(cellchat,meta = meta.data)\n\n# Step2. \u52a0\u8f7d CellChatDB \u6570\u636e\u5e93\ncellchatDB <- CellChatDB.human\ncellchat@DB <- cellchatDB\n\n# Step3. \u5904\u7406\u8868\u8fbe\u6570\u636e\ncellchat <- subsetData(cellchat)\ncellchat <- identifyOverExpressedGenes(cellchat)\ncellchat <- identifyOverExpressedInteractions(cellchat)\n\n# Step4. \u8ba1\u7b97\u901a\u8baf\u6982\u7387\uff0c\u63a8\u65ad\u7ec6\u80de\u901a\u8baf\u7f51\u7edc  \u8fd9\u4e00\u6b65\u5f88\u8017\u65f6\ncellchat <- computeCommunProb(cellchat,population.size = F)\ncellchat <- filterCommunication(cellchat,min.cells = 10)\n\n# Step5. \u63d0\u53d6\u9884\u6d4b\u7684\u7ec6\u80de\u901a\u8baf\u7f51\u7edc\u4e3a data frame\ndf.net <- subsetCommunication(cellchat)\ndf.pathway <- subsetCommunication(cellchat,slot.name = 'netP')\n\n# Step6. \u5728\u4fe1\u53f7\u901a\u8def\u6c34\u5e73\u63a8\u65ad\u7ec6\u80de\u901a\u8baf\ncellchat <- computeCommunProbPathway(cellchat)\n\n# Step7. \u8ba1\u7b97\u52a0\u548c\u7684 cell-cell \u901a\u8baf\u7f51\u7edc\ncellchat <- aggregateNet(cellchat)\npar(mfrow = c(1,2))\nnetVisual_circle(cellchat@net$count,vertex.weight = groupSize,\n                 weight.scale = T,label.edge = F,\n                 title.name = 'number of Interaction')\nnetVisual_circle(cellchat@net$weight,vertex.weight = groupSize,\n                 weight.scale = T,label.edge = F,\n                 title.name = 'Interaction Weight')\n\nmat <- cellchat@net$weight\npar(mfrow = c(3,3),xpd=T)\nfor (i in 1:nrow(mat)){\n  mat2 <- matrix(0,nrow = nrow(mat),ncol = ncol(mat),\n                 dimnames = dimnames(mat))\n  mat2[i,] <- mat[i,]\n  netVisual_circle(mat2,vertex.weight = groupSize,\n                   weight.scale = T,edge.weight.max = max(mat),\n                   title.name = rownames(mat)[i])\n}\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509175412678",src:a(9297).Z,width:"756",height:"304"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# Step8. \u4f7f\u7528\u5c42\u6b21\u56fe\uff08Hierarchical plot\uff09\uff0c\u5706\u5708\u56fe\uff08Circle plot\uff09\u6216\u548c\u5f26\u56fe\uff08Chord diagram\uff09\u53ef\u89c6\u5316\u6bcf\u4e2a\u4fe1\u53f7\u901a\u8def\ncellchat@netP$pathways\npathway.show <- c('SEMA4')\nvertex.receiver <- c(1,2,3,4)\nnetVisual_aggregate(cellchat,signaling = pathway.show,\n                    vertex.receiver = vertex.receiver,\n                    layout = 'hierarchy')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509175509671",src:a(8239).Z,width:"756",height:"309"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"par(mfrow=c(1,2),xpd=T)\nnetVisual_aggregate(cellchat,signaling = pathway.show,\n                    layout = 'circle')\nnetVisual_aggregate(cellchat,signaling = pathway.show,\n                    layout = 'circle',label.edge=T)\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509175527871",src:a(6284).Z,width:"756",height:"305"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"pairLR.CXCL <- extractEnrichedLR(cellchat,signaling = pathway.show,\n                                 geneLR.return = F)\nLR.show <- pairLR.CXCL[1,]\nnetVisual_individual(cellchat,signaling = pathway.show,\n                     pairLR.use = 'SEMA4A_PLXNB2',\n                     layout = 'circle')\n\nnetVisual_aggregate(cellchat,signaling = pathway.show,layout = 'chord',\n                    title.name = \"Chord diagram  1\")\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509175623495",src:a(1073).Z,width:"690",height:"1333"})),(0,l.kt)("h2",{id:"step-2-tcga-\u5dee\u5f02\u5206\u6790"},"Step 2. TCGA \u5dee\u5f02\u5206\u6790"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"library(TCGAbiolinks)\nlibrary(SummarizedExperiment)\nlibrary(AnnoProbe)\nlibrary(stringr)\nlibrary(limma)\nlibrary(tinyarray)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(pheatmap)\nlibrary(clusterProfiler)\nlibrary(org.Hs.eg.db)\nrm(list = ls())\n\n# \u4e0b\u8f7d LUAD \u8868\u8fbe\u77e9\u9635\nquery <- GDCquery(project = 'TCGA-LUAD',\n                  data.category = 'Transcriptome Profiling',\n                  data.type = 'Gene Expression Quantification',\n                  workflow.type = 'STAR - Counts')\nGDCdownload(query)\ndat <- GDCprepare(query)\nexp <- assay(dat)\nsave(exp,file='TCGA_LUAD_exp.Rdata')\n\n# \u4e0b\u8f7d LUAD \u4e34\u5e8a\u4fe1\u606f\nquery <- GDCquery(project = 'TCGA-LUAD',\n                  data.category = 'Clinical',\n                  data.type = 'Clinical Supplement',\n                  file.type = 'xml')\nGDCdownload(query)\ndat <- GDCprepare_clinic(query,clinical.info = 'patient')\nk = apply(dat, 2, function(x){!all(is.na(x))});table(k)\nclinical <- dat[,k]\nsave(clinical,file = 'TCGA_LUAD_Clinical.Rdata')\n")),(0,l.kt)("p",null,"\u6ce8\u610f\u4e00\u4e0b TCGA \u7684\u6837\u672c\u547d\u540d\u542b\u4e49\uff1a "),(0,l.kt)("p",null,"\u4ee5\u8fd9\u4e2a\u4e3a\u4f8b\uff1aTCGA-A6-6650-01A-11R-1774-07"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"A6"),"\uff1aTissue source site\uff0c\u7ec4\u7ec7\u6765\u6e90\u7f16\u7801"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"6650"),"\uff1aParticipant, \u53c2\u4e0e\u8005\u7f16\u53f7"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"01"),"\uff1aSample, \u7f16\u53f7 01~09 \u8868\u793a\u80bf\u7624\uff0c10~19 \u8868\u793a\u6b63\u5e38\u5bf9\u7167"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"A"),"\uff1aVial, \u5728\u4e00\u7cfb\u5217\u60a3\u8005\u7ec4\u7ec7\u4e2d\u7684\u987a\u5e8f\uff0c\u7edd\u5927\u591a\u6570\u6837\u672c\u8be5\u4f4d\u7f6e\u7f16\u7801\u90fd\u662f A; \u5f88\u5c11\u6570\u7684\u662f B\uff0c\u8868\u793a\u798f\u5c14\u9a6c\u6797\u56fa\u5b9a\u77f3\u8721\u5305\u57cb\u7ec4\u7ec7\uff0c\u5df2\u88ab\u8bc1\u660e\u7528\u4e8e\u6d4b\u5e8f\u5206\u6790\u7684\u6548\u679c\u4e0d\u4f73\uff0c\u6240\u4ee5\u4e0d\u5efa\u8bae\u4f7f\u7528-01B \u7684\u6837\u672c\u6570\u636e"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"11"),"\uff1aPortion, \u540c\u5c5e\u4e8e\u4e00\u4e2a\u60a3\u8005\u7ec4\u7ec7\u7684\u4e0d\u540c\u90e8\u5206\u7684\u987a\u5e8f\u7f16\u53f7\uff0c\u540c\u4e00\u7ec4\u7ec7\u4f1a\u5206\u5272\u4e3a 100-120mg \u7684\u90e8\u5206\uff0c\u5206\u522b\u4f7f\u7528"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"R"),"\uff1aRNA, \u5206\u6790\u7684\u5206\u5b50\u7c7b\u578b\uff0c\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\u6240\u793a\uff1a"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"1774"),"\uff1aPlate, \u5728\u4e00\u7cfb\u5217 96 \u5b54\u677f\u4e2d\u7684\u987a\u5e8f\uff0c\u503c\u5927\u8868\u793a\u5236\u677f\u8d8a\u665a"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"07"),"\uff1aCenter, \u6d4b\u5e8f\u6216\u9274\u5b9a\u4e2d\u5fc3\u7f16\u7801"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# count \u8f6c\u6362\u6210 TPM\ngene_length <- fread('gene_len.txt')\ncolnames(gene_length) <- c('id','length')\ngene_length <- as.data.frame(gene_length)\ngene_length <- gene_length[!duplicated(gene_length$id),]\n\nexp <- as.data.frame(exp)\nexp$id <- unlist(lapply(rownames(exp),function(x){str_split(x,'\\\\.',simplify = T)[,1]}))\n\nmerge <- left_join(x=exp,y=gene_length,by='id')\nmerge <- na.omit(merge)\nmerge <- merge[!duplicated(merge$id),]\nrownames(merge) <- merge$id\nmerge <- merge[,-601]\n# \u8ba1\u7b97 TPM\nkb <- merge$length / 1000\nrpk <- merge[,-601] / kb\ntpm <- t(t(rpk) / colSums(rpk) * 1E6)\nexp <- tpm\n")),(0,l.kt)("p",null,"\u91c7\u7528 limma \u505a\u5dee\u5f02\u5206\u6790\uff0c\u5148\u628a counts \u8f6c\u6362\u6210 TPM\u3002\u4e0d\u8f6c\u4e5f\u53ef\u4ee5\u7528 DEseq2 \u505a\u5dee\u5f02\u5206\u6790\u3002gene","_","length \u662f\u6bcf\u4e2a\u57fa\u56e0\u7684\u957f\u5ea6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u662f\u628a gtf \u6587\u4ef6\u4e2d\uff0c\u57fa\u56e0\u7684\u7ec8\u6b62\u4f4d\u7f6e-\u8d77\u59cb\u4f4d\u7f6e\u5f97\u5230\u7684\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u66f4\u6539\u884c\u540d\uff1aENSEMBL -> SYMBOL\na <- annoGene(str_split(rownames(exp),'\\\\.',simplify = T)[,1],'ENSEMBL')\na <- a[!duplicated(a$ENSEMBL),]\nrownames(a) <- a$ENSEMBL\nrownames(exp) <- a[str_split(rownames(exp),'\\\\.',simplify = T)[,1],'SYMBOL']\n# \u7ed9\u6837\u672c\u5206\u7ec4 tumor/normal\ngroup <- ifelse(sapply(str_split(colnames(exp),'-',simplify = T)[,4],function(x){as.integer(substr(x,1,2))})>=10,\n                'normal','tumor')\nsample_group <- data.frame(sample=colnames(exp),group=group)\n")),(0,l.kt)("p",null,"a \u662f annoGene \u51fd\u6570\u8fd4\u56de\u7684\u4e00\u4e2a ID \u8f6c\u6362\u7684\u7ed3\u679c\uff0c\u662f\u4e00\u4e2a dataframe\uff0c\u591a\u4e2a ENSEMBL ID \u53ef\u80fd\u5bf9\u5e94\u540c\u4e00\u4e2a SYMBOL ID\uff0c\u5bf9 symbol \u53bb\u91cd\u540e\uff0c\u518d\u6620\u5c04\u6210 exp \u7684\u884c\u540d\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509175922794",src:a(1450).Z,width:"752",height:"311"})),(0,l.kt)("p",null,"\u6309\u7167 TCGA \u540d\u5b57\u4e2d\u7b2c\u56db\u90e8\u5206\uff0c\u628a\u6837\u672c\u5206\u6210 tumor \u548c normal"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509175955369",src:a(6968).Z,width:"752",height:"286"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u8fc7\u6ee4\n# 1. \u53bb\u9664 FFPE \u6837\u672c\nsample_group$sample_type <- ifelse(sapply(str_split(colnames(exp),'-',simplify = T)[,4],function(x){substr(x,3,3)})=='A',\n                                   'tissue','ffpe')\nexp <- exp[,sample_group$sample_type!='ffpe']\nsample_group <- sample_group[sample_group$sample_type=='tissue',]\n# 2. \u4fdd\u7559\u5728\u4e00\u534a\u4ee5\u4e0a\u6837\u672c\u4e2d\u6709\u503c\u7684 gene\nexp <- exp[rowSums(exp>0)>as.integer(ncol(exp)/2),]\n\ndim(exp)\nsave(exp,file = 'TCGA_LUAD_TPM_exp.Rdata')\n")),(0,l.kt)("p",null,"FFPE \u6837\u672c\u65e0\u8bba\u505a\u6d4b\u5e8f\u8fd8\u662f\u86cb\u767d\u7ec4\uff0c\u4ee3\u8c22\u7ec4\uff0c\u6548\u679c\u90fd\u4e0d\u600e\u4e48\u597d"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u5bf9\u8868\u8fbe\u77e9\u9635\u53d6 log2\nfor (i in 1:ncol(exp)){\n  exp[,i] <- log2(exp[,i]+0.0001)\n}\ndim(exp)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u5dee\u5f02\u7b5b\u9009\ndesign <- model.matrix(~factor(sample_group$group,levels = c('tumor','normal')))\nfit <- lmFit(exp,design = design)\nfit <- eBayes(fit)\ndeg <- topTable(fit, coef = 2,number = Inf)\ndeg$change <- ifelse((deg$logFC>log2(2))&(deg$adj.P.Val<0.05),'up',\n                     ifelse((deg$logFC<log2(0.5))&(deg$adj.P.Val<0.05),'down','nochange'))\ndeg <- na.omit(deg)\ntable(deg$change)\n")),(0,l.kt)("p",null,"![\u56fe\u7247]","(data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='",(0,l.kt)("a",{parentName:"p",href:"http://www.w3.org/2000/svg'"},"http://www.w3.org/2000/svg'")," xmlns:xlink='",(0,l.kt)("a",{parentName:"p",href:"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg"},"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg")," stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)","![\u56fe\u7247]","(data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='",(0,l.kt)("a",{parentName:"p",href:"http://www.w3.org/2000/svg'"},"http://www.w3.org/2000/svg'")," xmlns:xlink='",(0,l.kt)("a",{parentName:"p",href:"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg"},"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg")," stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E) \u505a\u5b8c\u5dee\u5f02\u7b5b\u9009\uff0c\u6709 10 \u4e2a gene \u542b\u7a7a\u503c\uff0c\u5220\u53bb\u6709\u7a7a\u503c\u7684\u884c\u5373\u53ef\u3002\u66f4\u65b0\u4e0b exp \u5e76\u4fdd\u5b58\u597d"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# deg \u6bd4 exp \u5c11\u4e86\u51e0\u4e2a gene\nexp <- exp[intersect(rownames(exp),deg$ID),]\nsave(exp,file = 'TCGA_exp.Rdata')\nsave(deg,file = 'TCGA_DEGS.Rdata')\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# volcano plot\nggplot(deg,aes(x=deg$logFC,y=-log10(deg$adj.P.Val),color=change))+\n  geom_point()+\n  geom_hline(yintercept = -log10(0.05),linetype=2,linewidth=1)+\n  geom_vline(xintercept = log2(0.5),linetype=2,linewidth=1)+\n  geom_vline(xintercept = log2(2),linetype=2,linewidth=1)+\n  scale_color_manual(values=c('blue','gray','red'))\n# heatmap\ndeg_heatmap <- deg[order(deg$logFC,decreasing = T),]\ndeg_gene <- deg_heatmap[deg_heatmap$change!='nochange','ID']\nheatmap_deg_gene <- as.data.frame(exp)[deg_gene,]\nheatmap_deg_gene <- na.omit(heatmap_deg_gene)\nanno_col <- data.frame(group=sample_group$group)\nrownames(anno_col) <- sample_group$sample\npheatmap(heatmap_deg_gene,show_rownames = F,cluster_rows = F,scale = 'row',\n         show_colnames = F,annotation_col=anno_col ,\n         breaks = seq(-2.5,2.5,length.out=100))\ndim(heatmap_deg_gene)\n# pca plot\nexp <- as.data.frame(exp)\npca <- prcomp(t(exp))\nggplot(data.frame(pca$x),aes(x=PC1,y=PC2,color=sample_group$group))+\n  geom_point(size = 3)+stat_ellipse(level = 0.95, show.legend = F)+ \n  labs(title = 'PCA Analysis')+\n  theme(plot.title = element_text(hjust = 0.5))+\n  guides(color = guide_legend(title = 'Group'))\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509180121206",src:a(1624).Z,width:"752",height:"537"})),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509180142980",src:a(9745).Z,width:"752",height:"1070"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# GO enrich\ngo_bp <- enrichGO(deg_gene,org.Hs.eg.db,'SYMBOL','BP')\ngo_mf <- enrichGO(deg_gene,org.Hs.eg.db,'SYMBOL','MF')\ngo_cc <- enrichGO(deg_gene,org.Hs.eg.db,'SYMBOL','CC')\ndotplot(go_bp)\nbarplot(go_bp,showCategory = 4)\n\n# KEGG enrich\nentrez_id <- bitr(deg_gene,fromType = 'SYMBOL',toType = 'ENTREZID',OrgDb = org.Hs.eg.db)\nkegg <- enrichKEGG(entrez_id$ENTREZID,organism = 'hsa',keyType = 'ncbi-geneid')\ndotplot(kegg)\nbarplot(kegg,showCategory = 4)\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509180204539",src:a(4885).Z,width:"752",height:"1036"})),(0,l.kt)("h2",{id:"step-3-wgcna-\u5206\u6790"},"Step 3. WGCNA \u5206\u6790"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"library(WGCNA)\nlibrary(reshape2)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(patchwork)\nlibrary(ggplot2)\n\nrm(list = ls())\ngc()\nload('TCGA_DEGS.Rdata')\nload('TCGA_exp.Rdata')\nload('TCGA_LUAD_Clinical.Rdata')\noptions(stringsAsFactors = F) # \u5f00\u542f\u591a\u7ebf\u7a0b\nenableWGCNAThreads()\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# 1. \u6570\u636e\u5904\u7406\n# >>> \u9009\u53d6\u8868\u8fbe\u91cf\u524d 10000 \u7684 gene\uff0c\u7528\u5168\u90e8 gene \u7684\u8bdd\uff0c\u8ba1\u7b97\u540e\u9762\u7684\u90bb\u63a5\u77e9\u9635\u548c TOM \u77e9\u9635\u592a\u6162\u4e86\ntemp <- as.data.frame(exp)\ntemp$avg_exp <- rowMeans(temp)\ntemp <- temp[order(temp$avg_exp,decreasing = T),]\ntop10000_gene <- rownames(temp[1:10000,])\nexp <- as.data.frame(exp[top10000_gene,])\n\n# >>> \u67e5\u627e\u5e76\u5220\u9664\u5f02\u5e38\u503c\ntemp <- exp\ncolnames(temp) <- 1:ncol(exp)\nplot(hclust(dist(t(temp))))  # \u6ca1\u6709\u5f02\u5e38\u6837\u672c\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509180239398",src:a(2684).Z,width:"752",height:"426"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},'# 2. \u6784\u5efa\u57fa\u56e0\u5171\u8868\u8fbe\u7f51\u7edc\nexp <- as.data.frame(t(exp))\n\n# >>> 2.1 \u9009\u62e9\u5408\u9002\u7684 power\npower_vec <- c(seq(1, 10, by = 1), seq(12, 20, by = 2))\nsft <- pickSoftThreshold(exp,powerVector = power_vec) \n\na <- ggplot(sft$fitIndices,aes(x=Power,y=-sign(slope)*SFT.R.sq))+\n  geom_text(label=sft$fitIndices$Power,color=\'red\')+\n  geom_hline(yintercept = 0.9,color=\'red\')+\n  xlab("Soft Threshold (power)")+ylab("Scale Free Topology Model Fit,signed R^2")+\n  ggtitle("Scale independence")+theme(plot.title = element_text(hjust = 0.5))\n\nb <- ggplot(sft$fitIndices,aes(x=Power,y=mean.k.))+\n  geom_text(label=sft$fitIndices$Power,color=\'red\')+\n  xlab("Soft Threshold (power)")+ylab("Mean Connectivity")+\n  ggtitle(\'Mean connectivity\')+theme(plot.title = element_text(hjust = 0.5))\na+b\n')),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509180259854",src:a(4530).Z,width:"752",height:"530"})),(0,l.kt)("p",null,"\u8fd9\u91cc power=12\uff0c\u8fbe\u5230 0.8 \u5373\u53ef"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"power <- sft$powerEstimate\n\n# >>> 2.2 \u68c0\u9a8c\u6240\u9009 power \u662f\u5426\u7b26\u5408\u65e0\u5c3a\u5ea6\u7f51\u7edc\nk <- softConnectivity(exp,power = power)\nscaleFreePlot(k)\n")),(0,l.kt)("p",null,"power=12 \u786e\u5b9e\u4e5f\u7b26\u5408\u65e0\u5c3a\u5ea6\u7f51\u7edc\uff0cR2 \u8f83\u9ad8"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509180315053",src:a(1540).Z,width:"752",height:"506"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# >>> 2.3 \u8ba1\u7b97 gene \u5728 sample \u95f4\u7684 corr \u6216\u8005 distance\uff0c\u6784\u5efa\u4e34\u8fd1\u77e9\u9635\u3002\u9ed8\u8ba4\u7528 dist \u51fd\u6570\u8ba1\u7b97\uff08\u6b27\u6c0f\u8ddd\u79bb\uff09\nadj <- adjacency(exp,power = power)\n# >>> 2.4 \u6839\u636e\u4e34\u8fd1\u77e9\u9635\u8ba1\u7b97 TOM\uff08\u62d3\u6251\u91cd\u53e0\u77e9\u9635\uff09\nTOM <- TOMsimilarity(adj)\n# >>> 2.5 \u8ba1\u7b97 gene \u95f4\u76f8\u5f02\u6027\ndissTOM <- 1-TOM\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# 3. \u5bf9 gene \u8fdb\u884c\u805a\u7c7b\u5e76\u53ef\u89c6\u5316\ngeneTree <- hclust(as.dist(dissTOM),method = 'average')\nsizeGrWindow(12,9)\nplot(geneTree, xlab=\"\", sub=\"\", main = \"Gene clustering on TOM-based dissimilarity\",\n     labels = FALSE, hang = 0.04)\n# >>> 3.2 \u5c06 gene \u805a\u7c7b\u6811\u8fdb\u884c\u4fee\u526a\u540e\uff0c\u628a gene \u5f52\u5230\u4e0d\u540c\u7684\u6a21\u5757\u91cc\ndynamic_modules <- cutreeDynamic(dendro = geneTree,distM = dissTOM,minClusterSize = 50,\n                                 deepSplit = 2,pamRespectsDendro=F,minSplitHeight = NULL)\n\ntable(dynamic_modules)\nmodule_color <- labels2colors(dynamic_modules)\nplotDendroAndColors(geneTree,module_color,dendroLabels = F,hang=0.03,addGuide = T,\n                    guideHang = 0.05,groupLabels='Dynamic color tree',\n                    main='gene dendrogram and module colors')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509180335465",src:a(130).Z,width:"752",height:"514"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},'# >>> 3.3 \u8ba1\u7b97\u6bcf\u4e2a\u6a21\u5757\u7684\u7279\u5f81\u57fa\u56e0\u5411\u91cf\uff08\u5bf9\u6bcf\u4e2a\u6a21\u5757\u7684 gene \u8868\u8fbe\u91cf\u964d\u7ef4\u540e\uff0c\u53ea\u4fdd\u7559 PC1\uff0c\u5373 MEs)\nMEList <- moduleEigengenes(exp,colors = dynamic_modules)\nMEs <- MEList$eigengenes\n# >>> 3.4 \u8ba1\u7b97\u7279\u5f81\u57fa\u56e0\u7684\u76f8\u5f02\u5ea6\uff0c\u57fa\u4e8e\u76f8\u5f02\u5ea6\u5bf9\u539f\u6709\u6a21\u5757\u8fdb\u884c\u5c42\u6b21\u805a\u7c7b\ndissME <- 1-cor(MEs)\nMEtree <- hclust(as.dist(dissME),method = \'average\')\n\nplotEigengeneNetworks(MEs, \n                      "Eigengene adjacency heatmap", \n                      marHeatmap = c(3,4,2,2), \n                      plotDendrograms = FALSE, \n                      xLabelsAngle = 90) \n# >>> 3.5 \u5982\u679c\u6a21\u5757\u592a\u591a\uff0c\u53ef\u4ee5\u5bf9\u6a21\u5757\u8fdb\u884c\u5408\u5e76\u3002\u8bbe\u7f6e\u526a\u5207\u9ad8\u5ea6\uff0c\u526a\u5207\u9ad8\u5ea6\u4ee5\u4e0b\u7684\u6a21\u5757\u8fdb\u884c\u5408\u5e76\ncut_height <- 0.2\nsizeGrWindow(8,6)\nplot(MEtree,main = "Clustering of module eigengenes", \n     xlab = "", sub = "")\nabline(h=cut_height,col=\'red\')\n')),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509180405685",src:a(6208).Z,width:"752",height:"418"})),(0,l.kt)("p",null,"\u628a\u9ad8\u5ea6 0.2 \u4ee5\u4e0b\u7684\u6a21\u5757\u8fdb\u884c\u5408\u5e76\uff0c\u518d\u770b\u770b\u5408\u5e76\u524d\u540e\u6a21\u5757\u7684\u53d8\u5316"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},'module_merge <- mergeCloseModules(exp,module_color,cutHeight = cut_height)\nmerged_color <- module_merge$colors\nmerged_MEs <- module_merge$newMEs\n\nsizeGrWindow(8,6)\nplotDendroAndColors(geneTree,cbind(module_color,merged_color),dendroLabels = F,hang=0.03,addGuide = T,groupLabels = c("Dynamic Tree Cut", "Merged dynamic"))\n')),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509184136135",src:a(3565).Z,width:"752",height:"523"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# 4. \u8ba1\u7b97\u6bcf\u4e2a\u6a21\u5757\u4e0e\u4e34\u5e8a\u4fe1\u606f\u7684\u76f8\u5173\u6027\u3001pvalue\u3002\u627e\u51fa\u4e0e\u4e34\u5e8a\u4fe1\u606f\u76f8\u5173\u6027\u9ad8\u7684\u6a21\u5757\nnGenes <- ncol(exp)\nnSamples <- nrow(exp)\n################################\u51c6\u5907\u4e34\u5e8a\u4fe1\u606f####################################\nclinical <- clinical[,c('bcr_patient_barcode','gender','residual_tumor')]\ntraits <- data.frame(row.names = rownames(exp),ID=rownames(exp))\ntraits$ID <- substr(traits$ID,1,12)\nindex <- match(traits$ID,clinical$bcr_patient_barcode)\ntraits$gender <- as.numeric(as.factor(clinical[index,'gender']))\ntraits$residual_tumor <- as.numeric(as.factor(clinical[index,'residual_tumor']))\ntraits$type <- ifelse(sapply(str_split(rownames(traits),'-',simplify = T)[,4],\n                                       function(x){as.integer(substr(x,1,2))})>=10,'normal','tumor')\ntraits$type <- as.numeric(as.factor(traits$type))\ntraits <- traits[,-1]\n################################\u51c6\u5907\u4e34\u5e8a\u4fe1\u606f####################################\n")),(0,l.kt)("p",null,"clinical \u662f\u524d\u9762\u4e0b\u8f7d\u7684 TCGA \u4e34\u5e8a\u6570\u636e\uff0c\u8fd9\u91cc\u968f\u4fbf\u53d6\u4e86\u4e24\u4e2a\u6bd4\u8f83\u5173\u5fc3\u7684\u4e34\u5e8a\u4fe1\u606f\u3002clinical \u7684\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u75c5\u4eba\u7684 ID\uff0c\u800c\u8868\u8fbe\u77e9\u9635\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u6837\u672c\uff0c\u4e00\u4e2a\u75c5\u4eba\u8eab\u4e0a\u53ef\u80fd\u6709\u591a\u4e2a\u6837\u672c\u3002\u5728\u628a\u4e34\u5e8a\u4fe1\u606f\u548c\u8868\u8fbe\u77e9\u9635\u4e00\u4e00\u5bf9\u5e94\u7684\u65f6\u5019\uff0c\u5982\u679c\u76f4\u63a5\u628a exp \u7684\u884c\u540d\u53d6\u524d 12 \u4f4d\uff0c\u5c31\u4f1a\u4ea7\u751f\u91cd\u590d\u503c\u3002\u5728\u505a\u7684\u65f6\u5019\uff0c\u5148\u51c6\u5907\u597d\u6837\u672c\u548c\u75c5\u4eba ID \u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u518d\u628a clinical \u91cc\u75c5\u4eba\u7684\u4fe1\u606f\u7ed9\u5339\u914d\u8fc7\u6765"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509184220708",src:a(1917).Z,width:"752",height:"856"})),(0,l.kt)("p",null,"\u6700\u7ec8\u7684\u4e34\u5e8a\u4fe1\u606f\u662f\u8fd9\u6837\uff0c\u8981\u628a\u5b57\u7b26\u4e32\u53d8\u6210\u6570\u503c\u578b\u53d8\u91cf"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509184243649",src:a(5762).Z,width:"752",height:"548"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},'module_trait_cor <- cor(merged_MEs,traits,use = \'p\')\nmodule_trait_pvalue <- corPvalueStudent(module_trait_cor,nSamples)\ntrait_colors <- numbers2colors(traits,signed = T,centered = T)\na <- paste(signif(module_trait_cor, 2), "\\n(", signif(module_trait_pvalue, 1), ")", sep = "")\nsizeGrWindow(8,6)\nlabeledHeatmap(module_trait_cor,xLabels = colnames(traits),yLabels = colnames(merged_MEs),colorLabels = FALSE, \n               colors = blueWhiteRed(50),textMatrix = a,\n               setStdMargins = FALSE,cex.text = 0.65,zlim = c(-1,1), \n               main = paste("Module-trait relationships"))\n')),(0,l.kt)("p",null,"\u6a21\u5757\u4e0e tumor/normal \u4e4b\u95f4\u7684\u76f8\u5173\u6027\u5e76\u4e0d\u662f\u5f88\u9ad8\u3002\u5c31\u62ff\u7c89\u8272\u6a21\u5757\u5f53\u505a\u611f\u5174\u8da3\u7684\u6a21\u5757\u5427"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509184310937",src:a(4795).Z,width:"752",height:"552"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},'# 5. \u627e\u51fa\u611f\u5174\u8da3\u7684\u6a21\u5757\u5185\u7684\u67a2\u7ebd gene\n# >>> 5.1 \u8ba1\u7b97 gene \u8868\u8fbe\u91cf\u4e0e\u4e34\u5e8a\u6027\u72b6\u7684\u76f8\u5173\u6027\ngs <- apply(exp,2,function(x){cor(x,traits$type)})\n# >>> 5.2 \u57fa\u4e8e\u7f51\u7edc\u8ba1\u7b97 gene \u4e0e\u4e34\u5e8a\u6027\u72b6\u7684\u76f8\u5173\u6027\nns <- networkScreening(y=traits$type,datME = merged_MEs,datExpr = exp)\n# >>> 5.3 \u8ba1\u7b97\u6bcf\u4e2a gene \u4e0e\u7279\u5f81 gene \u7684\u76f8\u5173\u6027\nkme <- signedKME(datExpr = exp,datME = merged_MEs)\n# >>> 5.4 \u6839\u636e gs, ns, kme \u627e\u51fa hub gene\nhubgene_filter <- (gs>0.2 & ns$q.Weighted<0.01 & abs(kme$kMEmagenta)>0.4)\nhub_gene <- colnames(exp)[hubgene_filter]\n\nplotNetworkHeatmap(exp,\n                   plotGenes = hub_gene,\n                   networkType = "unsigned",\n                   useTOM = TRUE,\n                   power=8,\n                   main="unsigned correlations")\n')),(0,l.kt)("p",null,"\u770b\u4e0b kme\uff0c\u5176\u4e2d\u7c89\u8272\u6a21\u5757\u91cc\uff0cgene \u7684\u76f8\u5173\u6027\u5e76\u4e0d\u662f\u5f88\u9ad8\uff0c\u8fd9\u91cc\u7b5b\u9009\u4e86>0.4 \u7684\uff0c\u6700\u540e\u627e\u5230 25 \u4e2a hub gene\u3002\u5982\u679c\u9608\u503c\u518d\u8bbe\u9ad8\u4e00\u70b9\uff0chub gene \u5c31\u5168\u5361\u6389\u4e86\u3002\u8fd9\u8ddf\u6ca1\u6709\u7528\u6240\u6709\u7684 3w \u591a\u4e2a gene \u53bb\u8ba1\u7b97\u6709\u5173\uff0c\u4e5f\u8ddf\u4e00\u4e9b\u53c2\u6570\u6709\u5173\uff0c\u6211\u6ca1\u6709\u4e00\u4e2a\u4e2a\u53bb\u8c03\u6574\u4f18\u5316\uff0c\u53ea\u662f\u5c55\u793a\u4e00\u4e0b\u5982\u4f55\u505a\u56fe\u548c\u5206\u6790\u601d\u8def"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"hub_gene <- intersect(hub_gene,deg$ID)\nsave(hub_gene,file = 'TCGA_WGCNA_hub_gene.Rdata')\n")),(0,l.kt)("p",null,"\u6700\u540e\u627e\u51fa hub gene \u548c\u524d\u9762 deg \u7684\u4ea4\u96c6\u90e8\u5206\uff0c\u4f5c\u4e3a hub gene\uff0c\u5b58\u6863"),(0,l.kt)("h2",{id:"step-4-\u975e\u8d1f\u77e9\u9635\u5206\u89e3\u7b97\u6cd5"},"Step 4. \u975e\u8d1f\u77e9\u9635\u5206\u89e3\u7b97\u6cd5"),(0,l.kt)("h3",{id:"41-nmf-\u7b97\u6cd5\u5bf9\u6837\u672c\u5206\u7c7b"},"4.1 NMF \u7b97\u6cd5\u5bf9\u6837\u672c\u5206\u7c7b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"library(NMF)\nlibrary(survival)\nlibrary(stringr)\nlibrary(data.table)\nlibrary(survminer)\nlibrary(dplyr)\nlibrary(AnnoProbe)\nlibrary(CIBERSORT)\nlibrary(tidyr)\nlibrary(tibble)\nlibrary(RColorBrewer)\nlibrary(ggalluvial)\nlibrary(ggplot2)\noptions(stringsAsFactors = F)\nrm(list = ls())\ngc()\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"load('TCGA_LUAD_TPM_exp.Rdata')\nload('TCGA_DEGS.Rdata')\nload('TCGA_WGCNA_hub_gene.Rdata')\ndim(exp)\n\n# \u5bf9\u8868\u8fbe\u77e9\u9635\u53d6 log2\nexp <- log2(exp+1)\n\nranks <- seq(2,10)\nhubgene_exp <- exp[hub_gene,]\n\nestimate <- nmf(hubgene_exp,2:10,nrun=50,method = 'brunet')\n\nplot(estimate)\n")),(0,l.kt)("p",null,"\u6ce8\u610f hubgene","_","exp \u91cc\u4e0d\u80fd\u6709\u8d1f\u6570\uff0c\u4e0d\u7136\u4f1a\u62a5\u9519\uff0crank \u4e3a 2 \u65f6\uff0c\u6ce2\u52a8\u6700\u5927"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509184405897",src:a(5395).Z,width:"752",height:"535"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},'rank <- 2\nnmf.rank4 <- nmf(hubgene_exp,rank,nrun=50,method = \'brunet\')\n\nindex <- extractFeatures(nmf.rank4,\'max\')\nindex <- unlist(index)\n\nnmf.exp <- hubgene_exp[index,]\nnmf.exp <- na.omit(nmf.exp)\ngroup <- predict(nmf.rank4)\n\njco <- c("#2874C5","#EABF00","#C6524A","#868686")\nconsensusmap(nmf.rank4,labRow=NA,labCol=NA,\n             annCol = data.frame("cluster"=group[colnames(nmf.exp)]),\n             annColors = list(cluster=c("1"=jco[1],"2"=jco[2],"3"=jco[3],"4"=jco[4])))\ncluster_df <- data.frame(row.names = colnames(exp),ID=substr(colnames(exp),1,12),cluster=group)\n')),(0,l.kt)("p",null,"NMF \u7b97\u6cd5\u628a\u6240\u6709\u6837\u672c\u5206\u6210\u4e24\u7c7b\uff0c\u987a\u4fbf\u770b\u4e0b\u6700\u540e\u7684 clueter","_","df","![\u56fe\u7247]","(data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='",(0,l.kt)("a",{parentName:"p",href:"http://www.w3.org/2000/svg'"},"http://www.w3.org/2000/svg'")," xmlns:xlink='",(0,l.kt)("a",{parentName:"p",href:"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg"},"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg")," stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509184432644",src:a(2259).Z,width:"752",height:"1141"})),(0,l.kt)("h3",{id:"42-\u751f\u5b58\u5206\u6790"},"4.2 \u751f\u5b58\u5206\u6790"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"load('TCGA_LUAD_TPM_exp.Rdata')\nload('TCGA_LUAD_Clinical.Rdata')\n\n# 1. \u53d6 log\uff08TPM\uff09\nfor (i in 1:ncol(exp)){\n  exp[,i] <- log2(exp[,i]+0.0001)\n}\n# 2. \u4ee5\u75c5\u4eba\u4e3a\u4e2d\u5fc3\uff0c\u53bb\u91cd\nexp <- as.data.frame(exp)\nexp <- exp[,sort(colnames(exp))]\nindex <- !duplicated(substr(colnames(exp),1,12))\nexp <- exp[,index]\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# 3. \u8bfb\u53d6\u4ece xena \u4e0b\u8f7d\u7684\u751f\u5b58\u6570\u636e\nsur <- fread('TCGA-LUAD.survival.tsv')\nsur <- as.data.frame(sur)\npatient_id <- substr(colnames(exp),1,12)\nclin <- data.frame(row.names = patient_id,ID=patient_id)\nindex <- match(clin$ID,sur[,'_PATIENT'])\nclin <- cbind(clin,sur[index,c('OS','OS.time')])\nclin <- na.omit(clin)\n\nindex2 <- match(clin$ID,clinical$bcr_patient_barcode)\nclin <- cbind(clin,clinical[index2,'gender'])\ncolnames(clin) <- c(colnames(clin)[1:ncol(clin)-1],'gender')\nclin$gender <- as.numeric(as.factor(clin$gender))\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509184553116",src:a(8559).Z,width:"757",height:"772"})),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509184613334",src:a(9329).Z,width:"757",height:"730"})),(0,l.kt)("p",null,"\u4e0b\u8f7d\u4e0b\u6765\u7684\u751f\u5b58\u6570\u636e\u957f\u8fd9\u6837"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509184731529",src:a(2136).Z,width:"757",height:"383"})),(0,l.kt)("p",null,"\u4e4b\u524d\u4ece TCGA \u4e0b\u8f7d\u7684\u4e34\u5e8a\u6570\u636e\u957f\u8fd9\u6837"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509184831481",src:a(5937).Z,width:"757",height:"278"})),(0,l.kt)("p",null,"\u5408\u5e76\u540e\u7684 clin \u662f\u8fd9\u6837\uff0c\u6240\u6709\u53d8\u91cf\u7c7b\u578b\u90fd\u8981\u8f6c\u6210\u6570\u503c\u578b"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509184848098",src:a(1586).Z,width:"757",height:"462"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u5408\u5e76 NMF \u7ed3\u679c\ncluster_type_group <- ifelse(sapply(str_split(rownames(cluster_df),'-',simplify = T)[,4],\n                                    function(x){as.integer(substr(x,1,2))}\n                                    )>=10,\n                            'normal','tumor')\ncluster_df <- cluster_df[which(cluster_type_group=='tumor'),]\n\nclin <- left_join(clin,cluster_df,'ID',multiple='first')\n")),(0,l.kt)("p",null,"\u518d\u628a NMF \u5206\u7c7b\u7684\u7ed3\u679c\u6dfb\u52a0\u8fdb\u6765\uff0c\u5c31\u662f cluster \u90a3\u4e00\u5217"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509184928906",src:a(4126).Z,width:"748",height:"410"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# 7. \u8fc7\u6ee4\u751f\u5b58\u6570\u636e\uff0c\u4e0d\u8981<30 \u5929\u7684\uff0c\u518d\u628a\u5929\u6570\u8f6c\u6362\u6210\u6708\nclin <- clin[clin$OS.time>30,]\nclin$OS.time <- clin$OS.time / 30\n\n# 8. exp \u7684\u5217\u540d\u548c\u4e34\u5e8a\u4fe1\u606f\u7684\u884c\u540d\u4e00\u4e00\u5bf9\u5e94\u3002NMF \u5c06\u6837\u672c\u5206\u6210\u82e5\u5e72\u4e2a\u4e9a\u578b\uff0c\u753b\u51fa\u4e9a\u578b\u7684\u751f\u5b58\u66f2\u7ebf\ncolnames(exp) <- substr(colnames(exp),1,12)\nindex <- match(clin$ID,colnames(exp))\nexp <- exp[,index]\n\nsfit <- survfit(Surv(OS.time,OS)~cluster,data=clin)\nggsurvplot(sfit,pval = T)\n\nsave(clin,file = 'clin.Rdata')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509184951924",src:a(2257).Z,width:"748",height:"516"})),(0,l.kt)("h3",{id:"43-\u514d\u75ab\u6d78\u6da6"},"4.3 \u514d\u75ab\u6d78\u6da6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},'my_pallet <- colorRampPalette(brewer.pal(8,\'Set1\'))\nlm22f = system.file("extdata", "LM22.txt", package = "CIBERSORT")\ncluster1 <- exp[,rownames(cluster_df[cluster_df$cluster==1,])]\ncluster2 <- exp[,rownames(cluster_df[cluster_df$cluster==2,])]\n\nTME.result1 <- cibersort(lm22f,as.matrix(cluster1),perm = 100,QN=T) # \u8017\u65f6\u5f88\u4e45\nTME.result2 <- cibersort(lm22f,as.matrix(cluster2),perm = 100,QN=T)\n')),(0,l.kt)("p",null,"\u539f\u6587\u4e2d\u514d\u75ab\u6d78\u6da6\u7528 MCPcounter \u505a\u7684\uff0c\u8fd9\u91cc\u6211\u7528 CIBERSORT \u505a\uff0c\u8fd0\u884c\u5b8c\u7684\u7ed3\u679c\u5c31\u662f\u5404\u79cd\u514d\u75ab\u7ec6\u80de\u5728\u6bcf\u4e2a\u6837\u672c\u4e2d\u7684\u542b\u91cf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"result1 <- TME.result1[,-c(23:25)] %>% as.data.frame() %>% \n  rownames_to_column('Sample') %>% gather(key = cell_type,value = proportion,-Sample)\nresult2 <- TME.result2[,-c(23:25)] %>% as.data.frame() %>% \n  rownames_to_column('Sample') %>% gather(key = cell_type,value = proportion,-Sample)\n\nresult1$cluster <- rep('cluster1', times=nrow(result1))\nresult2$cluster <- rep('cluster2', times=nrow(result2))\ndat <- rbind(result1,result2)\nggplot(dat,aes(axis1 = cluster, axis2 = cell_type))+\n  geom_alluvium(aes(fill = as.factor(cell_type)),width = 2/5, discern = FALSE)+\n  geom_stratum(width = 2/5, discern = FALSE)+\n  geom_text(stat = \"stratum\", discern = FALSE,aes(label = after_stat(stratum)))+\n  theme(legend.position = \"none\",#\u53bb\u9664\u523b\u5ea6\u7ebf\u548c\u80cc\u666f\u989c\u8272\n        panel.background = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(size =15,colour = \"black\"),#\u5750\u6807\u8f74\u540d\n        axis.title = element_blank()) +\n  scale_x_discrete(position = \"top\")\n")),(0,l.kt)("p",null,"\u628a\u4e0a\u9762\u7684\u900f\u89c6\u8868\u8f6c\u6362\u6210\u957f\u8868\uff0c\u6dfb\u52a0\u4e0a cluster \u7684\u4fe1\u606f\uff0c\u518d\u628a cluster1 \u548c cluster2 \u5bf9\u5e94\u7684\u957f\u8868\u5408\u5e76\u8d77\u6765\uff0c\u5c31\u53ef\u4ee5\u753b\u56fe\u4e86"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509185053953",src:a(1860).Z,width:"748",height:"756"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"cell <- 'Plasma cells'\nggviolin(dat[dat$cell_type==cell,],x='cluster',y='proportion',fill = 'cluster',\n         add = 'boxplot',add.params = list(fill = 'white',width=0.1,linetype=1),title = cell)+\n  stat_compare_means(method = 't.test',label = 'p.format',aes(label = 'p.format'),\n                              label.x.npc = 'center',label.y = 0.5,size=5)\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509185114933",src:a(6969).Z,width:"748",height:"535"})),(0,l.kt)("h3",{id:"44-\u6279\u91cf\u5355\u56e0\u7d20-cox-\u56de\u5f52"},"4.4 \u6279\u91cf\u5355\u56e0\u7d20 Cox \u56de\u5f52"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"load('TCGA_WGCNA_hub_gene.Rdata')\nload('TCGA_LUAD_TPM_exp.Rdata') \nload('clin.Rdata')\nhubgene_exp <- exp[hub_gene,]\nhubgene_exp <- as.data.frame(t(hubgene_exp))\nhubgene_exp$ID <- substr(rownames(hubgene_exp),1,12)\nclin <- left_join(clin,hubgene_exp,by='ID')\n")),(0,l.kt)("p",null,"\u628a WGCNA \u4e2d\u627e\u5230\u7684 hub gene \u6311\u51fa\u6765\uff0c\u62ff\u5230\u4ed6\u4eec\u5728\u6240\u6709\u6837\u672c\u4e2d\u7684\u8868\u8fbe\u503c\u3002\u628a\u8868\u8fbe\u503c\u548c\u751f\u5b58\u4fe1\u606f\u5408\u5e76\u5230\u4e00\u8d77\uff0c\u6700\u540e\u7684 clin \u957f\u8fd9\u6837\u3002\u5728\u5408\u5e76\u4e4b\u524d\u8981\u6ce8\u610f\uff0c\u5220\u6389 normal \u6837\u672c\uff0c\u6211\u8fd9\u91cc\u6ca1\u6709\u505a\u3002","![\u56fe\u7247]","(data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='",(0,l.kt)("a",{parentName:"p",href:"http://www.w3.org/2000/svg'"},"http://www.w3.org/2000/svg'")," xmlns:xlink='",(0,l.kt)("a",{parentName:"p",href:"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg"},"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg")," stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"res.cox <- coxph(Surv(OS.time,OS)~SAPCD2,data=clin)\nsumres.cox <- summary(res.cox)\n")),(0,l.kt)("p",null,"\u6311\u4e00\u4e2a\u57fa\u56e0 SAPCD2 \u505a\u5355\u56e0\u7d20 cox \u56de\u5f52\uff0c\u6700\u540e\u9700\u8981\u7684\u4fe1\u606f\u90fd\u85cf\u5728 sumres.cox \u91cc"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u6279\u91cf\u5355\u56e0\u7d20 cox \u56de\u5f52\ngene <- c()\np_value <- c()\nHR <- c()\nlower95 <- c()\nupper95 <- c()\nfor (i in 6:ncol(clin)){\n  res <- coxph(Surv(OS.time,OS)~clin[,i],data=clin)\n  sum_res <- summary(res)\n  p <- sum_res$coefficients[,'Pr(>|z|)']\n  if (p<0.05){\n    gene <- c(gene,colnames(clin)[i])\n    p_value <- c(p_value,p)\n    HR <- c(HR,sum_res$conf.int[,'exp(coef)'])\n    lower95 <- c(lower95,sum_res$conf.int[,'lower .95'])\n    upper95 <- c(upper95,sum_res$conf.int[,'upper .95'])\n  }\n}\ncox_df <- data.frame(row.names = gene,pvalue=p_value,HR=HR,lower.95=lower95,upper.95=upper95)\nlasso_input_gene <- rownames(cox_df[cox_df$pvalue<0.01,])\nsave(lasso_input_gene,file = 'Lasso_input_gene.Rdata')\n")),(0,l.kt)("p",null,"\u6279\u91cf\u5355\u56e0\u7d20 cox \u56de\u5f52\u5f97\u5230\u6bcf\u4e2a gene \u7684 pvalue\uff0c\u6311\u51fa pvalue<0.01 \u7684\u518d\u8fdb\u884c\u540e\u7eed\u7b5b\u9009"),(0,l.kt)("h2",{id:"step-5-\u9884\u540e\u6a21\u578b\u6784\u5efa\u548c\u9a8c\u8bc1"},"Step 5. \u9884\u540e\u6a21\u578b\u6784\u5efa\u548c\u9a8c\u8bc1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"load('Lasso_input_gene.Rdata')\nload('TCGA_LUAD_TPM_exp.Rdata')\nload('clin.Rdata')\n\n# \u5bf9\u8868\u8fbe\u77e9\u9635\u53d6 log2\nexp <- log2(exp+0.00001)\nexp <- as.data.frame(exp)\n\n# Lasso \u56de\u5f52\u8fdb\u4e00\u6b65\u7b5b\u9009 gene\nexp2 <- exp[lasso_input_gene,]\nexp2 <- as.data.frame(t(exp2))\nexp2$ID <- substr(rownames(exp2),1,12)\nexp2 <- exp2[!duplicated(exp2$ID),]\nclin <- clin[,1:3]\n\nexp3 <- left_join(clin,exp2,by='ID')\nrownames(exp3) <- exp3$ID\nexp3 <- exp3[,-1]\nexp3 <- na.omit(exp3)\n")),(0,l.kt)("p",null,"exp3 \u662f\u751f\u5b58\u6570\u636e\u548c\u4e0a\u4e00\u6b65\u6279\u91cf\u5355\u56e0\u7d20 Cox \u56de\u5f52\u7b5b\u9009\u51fa\u6765\u7684\u57fa\u56e0\u7684\u8868\u8fbe\u91cf\u5408\u5e76\u8d77\u6765\u7684\u7ed3\u679c\uff01","[\u56fe\u7247]","(data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='",(0,l.kt)("a",{parentName:"p",href:"http://www.w3.org/2000/svg'"},"http://www.w3.org/2000/svg'")," xmlns:xlink='",(0,l.kt)("a",{parentName:"p",href:"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg"},"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg")," stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"x <- as.matrix(exp3[,3:(ncol(exp3)-1)])\ny <- Surv(exp3$OS.time,exp3$OS)\nfit1 <- glmnet(x,y,alpha = 1,family = 'cox')\nplot(fit1)\ncv_fit <- cv.glmnet(x,y,alpha = 1,nfolds = 10,family=\"cox\")\n\nplot(cv_fit)\nbest_lambda <- cv_fit$lambda.min\nfit2 <- glmnet(x,y,lambda = best_lambda,alpha = 1,family = 'cox')\nlasso_filter_gene <- names(fit2$beta[fit2$beta[,1]!=0,1])\n")),(0,l.kt)("p",null,"\u7531\u4e8e\u4e4b\u524d\u7b5b\u9009\u51fa\u6765\u7684 gene \u6548\u679c\u4e0d\u600e\u4e48\u597d\uff0c \u7ecf\u8fc7 lasso \u8fc7\u6ee4\u540e\uff0c\u53ea\u5269 2 \u4e2a gene \u4e86\uff0c\u5c31\u7528\u8fd9\u4e24\u4e2a\u6765\u505a\u591a\u56e0\u7d20 cox \u56de\u5f52"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u591a\u56e0\u7d20 cox \u56de\u5f52\u6784\u5efa\u9884\u540e\u6a21\u578b\nexp4 <- exp3 %>% dplyr::select(OS,OS.time,lasso_filter_gene)\nmulticox <- coxph(Surv(OS.time,OS)~.,data = exp4)\nsum_multicox <- summary(multicox)\n\nriskScore <- predict(multicox,type = 'risk',newdata = exp4)\nriskScore <- as.data.frame(riskScore)\nriskScore$ID <- rownames(riskScore)\nriskScore$risk <- ifelse(riskScore$riskScore>median(riskScore$riskScore),'high','low')\n")),(0,l.kt)("p",null,"\u505a\u5b8c\u591a\u56e0\u7d20\u56de\u5f52\u540e\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u6837\u672c\u7684 riskscore\uff0c\u7528 riskScore \u628a\u6837\u672c\u5206\u6210\u4e24\u7c7b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# KM plot\nkm_data <- left_join(riskScore,clin,by='ID')\nfit <- survfit(Surv(OS.time,OS)~risk,data=km_data)\nggsurvplot(fit,data = km_data,pval = T,risk.table = T,surv.median.line = 'hv',\n                       legend.title = 'RiskScore',title = 'Overall survival',\n                       ylab='Cummulative survival',xlab='Time(Days)')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509185217444",src:a(8953).Z,width:"748",height:"532"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},'# \u7ed8\u5236 ROC \u66f2\u7ebf\n\nroc_data <- data.frame(x = roc$FP[,1],\n                       y = roc$TP[,1],\n                       time = roc$times[1])\nfor (i in 2:length(roc$times)) {\n  temp <- data.frame(x = roc$FP[,i],\n                     y = roc$TP[,i],\n                     time = roc$times[i])\n  roc_data <- rbind(roc_data, temp)\n}\nggplot(roc_data, aes(x = x, y = y, color = as.factor(time))) + \n  geom_line() + \n  scale_color_manual(values = c("gray", "blue", "black")) +\n  geom_abline(slope = 1, intercept = 0, linetype = "dashed") +\n  xlab("1 - Specificity") + \n  ylab("Sensitivity") + \n  ggtitle("ROC Curve") + \n  theme_minimal()\n')),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509185244243",src:a(5738).Z,width:"748",height:"533"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u7ed8\u5236\u98ce\u9669\u56fe\nggrisk(multicox)\n")),(0,l.kt)("p",null,"!",(0,l.kt)("img",{alt:"image-20230509185309625",src:a(4553).Z,width:"748",height:"544"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# risk score \u4e0e\u4e34\u5e8a\u75c5\u7406\u7279\u5f81\u7684\u76f8\u5173\u6027\nload('TCGA_LUAD_Clinical.Rdata')\nclinical_df <- clinical[,c('bcr_patient_barcode','gender','stage_event_pathologic_stage')]\nclinical_df <- merge(km_data,clinical_df,by.x = 'ID',by.y = 'bcr_patient_barcode')\nclinical_df <- clinical_df[!duplicated(clinical_df$ID),]\nclinical_df$stage_event_pathologic_stage <- case_when(clinical_df$stage_event_pathologic_stage=='Stage IA'~'Stage I',\n                                                      clinical_df$stage_event_pathologic_stage=='Stage IB'~'Stage I',\n                                                      clinical_df$stage_event_pathologic_stage=='Stage IIA'~'Stage II',\n                                                      clinical_df$stage_event_pathologic_stage=='Stage IIB'~'Stage II',\n                                                      clinical_df$stage_event_pathologic_stage=='Stage IIIA'~'Stage III',\n                                                      clinical_df$stage_event_pathologic_stage=='Stage IIIB'~'Stage III',\n                                                      )\nggviolin(clinical_df,x='gender',y='riskScore',fill = 'gender',\n         add = 'boxplot',add.params = list(fill = 'white',width=0.1,linetype=1),)+\n  stat_compare_means(method = 'wilcox.test',label = 'p.format',aes(label = 'p.format'),\n                     label.x.npc = 'center',label.y = 20,size=5)\n\nggviolin(clinical_df,x='stage_event_pathologic_stage',y='riskScore',fill = 'stage_event_pathologic_stage',\n         add = 'boxplot',add.params = list(fill = 'white',width=0.1,linetype=1),)+\n  stat_compare_means(method = 'wilcox.test',label = 'p.signif',aes(label = 'p.format'),\n                     label.x = 1,label.y = 20,size=5)\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509185329453",src:a(4504).Z,width:"748",height:"1053"})),(0,l.kt)("h2",{id:"step-6-riskscore-\u548c\u4e34\u5e8a\u4fe1\u606f\u7684\u76f8\u5173\u6027"},"Step 6. riskScore \u548c\u4e34\u5e8a\u4fe1\u606f\u7684\u76f8\u5173\u6027"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u68ee\u6797\u56fe\n\n# \u6279\u91cf\u5355\u56e0\u7d20\u56de\u5f52\ndf_forest <- clinical_df\ndf_forest$gender <- as.numeric(as.factor(df_forest$gender))\ndf_forest$stage_event_pathologic_stage <- as.numeric(as.factor(df_forest$stage_event_pathologic_stage))\ngene <- c()\np_value <- c()\nHR <- c()\nlower95 <- c()\nupper95 <- c()\nmeans <- c()\nfor (i in c('riskScore','gender','stage_event_pathologic_stage')){\n  res <- coxph(Surv(OS.time,OS)~df_forest[,i],data=df_forest)\n  sum_res <- summary(res)\n  p <- sum_res$coefficients[,'Pr(>|z|)']\n  gene <- c(gene,i)\n  p_value <- c(p_value,p)\n  HR <- c(HR,sum_res$conf.int[,'exp(coef)'])\n  lower95 <- c(lower95,sum_res$conf.int[,'lower .95'])\n  upper95 <- c(upper95,sum_res$conf.int[,'upper .95'])\n  means <- c(means,res$means)\n}\ncox_df <- data.frame(row.names = gene,pvalue=p_value,HR=HR,lower.95=lower95,upper.95=upper95,means=means)\ncox_df$pvalue <- round(cox_df$pvalue,3)\ncox_df$HR <- round(cox_df$HR,3)\ncox_df <- rownames_to_column(cox_df,var = 'Variable')\ncox_df <- rbind(colnames(cox_df),cox_df)\n\nforestplot(labeltext=as.matrix(cox_df)[,1:3],lower=as.numeric(cox_df[,4]),\n           upper=as.numeric(cox_df[,5]),mean=as.numeric(cox_df[,6]),\n           is.summary=c(T,F,F,F),\n           zero=0,lineheight=unit(0.5,'cm'),graphwidth=unit(35,'mm'),\n           colgap=unit(2,'mm'),lwd.zero=2,lwd.ci=3,\n           col=fpColors(box = '#7AC5CD',lines = 'black',zero = 'purple'),\n           lwd.xaxis=2,lty.ci='solid',ci.vertices.height=0.05,graph.pos=2,\n           xlim=c(0,2.5),box.size=0.5,\n           hrzl_lines=list('2'=gpar(lwd=3,columns=1:4,col='dark green'),\n                           '5'=gpar(lwd=3,columns=1:4,col='dark green'))\n           )\n\n# \u591a\u56e0\u7d20\u56de\u5f52\nres <- coxph(Surv(OS.time,OS)~riskScore+gender+stage_event_pathologic_stage,data=df_forest)\nsum_res <- summary(res)\ndf <- data.frame(row.names = rownames(sum_res$conf.int),pvalue=sum_res$coefficients[,'Pr(>|z|)'],\n                 HR=sum_res$conf.int[,'exp(coef)'],lower=sum_res$conf.int[,'lower .95'],\n                 upper=sum_res$conf.int[,'upper .95'],means=res$means)\ndf$pvalue <- round(df$pvalue,3)\ndf$HR <- round(df$HR,3)\ndf <- rownames_to_column(df,var='Variable')\ndf <- rbind(colnames(df),df)\n\nforestplot(labeltext=as.matrix(df)[,1:3],lower=as.numeric(df[,4]),\n           upper=as.numeric(df[,5]),mean=as.numeric(df[,6]),\n           is.summary=c(T,F,F,F),\n           zero=0,lineheight=unit(0.5,'cm'),graphwidth=unit(35,'mm'),\n           colgap=unit(2,'mm'),lwd.zero=2,lwd.ci=3,\n           col=fpColors(box = '#7AC5CD',lines = 'black',zero = 'purple'),\n           lwd.xaxis=2,lty.ci='solid',ci.vertices.height=0.05,graph.pos=2,\n           xlim=c(0,2.5),box.size=0.5,\n           hrzl_lines=list('2'=gpar(lwd=3,columns=1:4,col='dark green'),\n                           '5'=gpar(lwd=3,columns=1:4,col='dark green'))\n)\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509185354749",src:a(6796).Z,width:"748",height:"631"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# GSEA\ndf_exp <- as.data.frame(t(exp))\ndf_exp <- rownames_to_column(df_exp,var = 'sample_ID')\ndf_exp$sample_ID <- substr(df_exp$sample_ID,1,12)\ndf_exp <- df_exp[!duplicated(df_exp$sample_ID),]\nrownames(df_exp) <- df_exp$sample_ID\ndf_exp <- as.data.frame(t(df_exp[,-1]))\ndf_exp <- df_exp[,km_data$ID]\ngroup <- as.factor(km_data$risk)\ndesign <- model.matrix(~km_data$risk)\nfit <- lmFit(df_exp,design)\nfit <- eBayes(fit)\ndf_deg <- topTable(fit,coef = 2,number = Inf)\ndf_deg$change <- ifelse(df_deg$logFC>log2(2) & df_deg$adj.P.Val<0.05,'up',\n                        ifelse(df_deg$logFC<log2(0.5) & df_deg$adj.P.Val<0.05,'down','nochange'))\ndf_deg <- df_deg[order(df_deg$logFC,decreasing = T),]\nsymbol_2_entrez <- bitr(rownames(df_deg),fromType = 'SYMBOL',toType = 'ENTREZID',OrgDb = org.Hs.eg.db)\nsymbol_2_entrez <- symbol_2_entrez[!duplicated(symbol_2_entrez$SYMBOL),]\nrownames(symbol_2_entrez) <- symbol_2_entrez$SYMBOL\ndf_deg$entrezid <- symbol_2_entrez[rownames(df_deg),'ENTREZID']\ndf_deg <- df_deg[!duplicated(df_deg$entrezid),]\ndf_deg <- na.omit(df_deg)\n\na <- df_deg[(df_deg$change=='up'),'logFC']\nnames(a) <- df_deg[(df_deg$change=='up'),'entrezid']\nres_a <- gseKEGG(a,'hsa')\n\nb <- df_deg[(df_deg$change=='down'),'logFC']\nnames(b) <- df_deg[(df_deg$change=='down'),'entrezid']\nres_b <- gseKEGG(b,'hsa')\n\ngseaplot2(res_a,geneSetID = 1:5)\ngseaplot2(res_b,geneSetID = 1:5)\n")),(0,l.kt)("p",null,"\u5148\u505a\u5dee\u5f02\u5206\u6790\uff0c\u627e\u5230 high risk vs low risk \u7684\u5dee\u5f02\u57fa\u56e0\uff0c\u4e0a\u8c03\u548c\u4e0b\u8c03\u7684 gene \u5206\u522b\u62ff\u53bb\u505a GSEA \u518d\u753b\u56fe"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509185420806",src:a(1681).Z,width:"748",height:"528"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# waterfall plot\nquery <- GDCquery(project = 'TCGA-LUAD',\n                  data.category = \"Simple Nucleotide Variation\",\n                  data.type = \"Masked Somatic Mutation\",\n                  access = 'open')\nGDCdownload(query)\nGDCprepare(query,save = T,save.filename = 'TCGA-LUAD-SNP.Rdata')\n\nload('TCGA-LUAD-SNP.Rdata')\nluad_snp <- read.maf(maf=data)\nplotmafSummary(luad_snp,rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)\noncoplot(luad_snp,top = 15)\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509185458438",src:a(7847).Z,width:"748",height:"1040"})),(0,l.kt)("h2",{id:"step-7-\u9ad8\u4f4e\u98ce\u9669\u7ec4\u95f4\u7684\u514d\u75ab\u6d78\u6da6"},"Step 7. \u9ad8\u4f4e\u98ce\u9669\u7ec4\u95f4\u7684\u514d\u75ab\u6d78\u6da6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"library(GSVA)\nlibrary(GSEABase)\nlibrary(ggplot2)\nlibrary(tidyr)\nrm(list = ls())\n\n#1. \u83b7\u53d6 geneSets\n# \u4e0b\u8f7d 28 \u79cd\u514d\u75ab\u7ec6\u80de\u7684\u53c2\u8003\u57fa\u56e0\u96c6 <http://cis.hku.hk/TISIDB/data/download/CellReports.txt>\ngeneSet <- read.csv(\"cellReport.txt\",header = F,sep = \"\\t\",)\ngeneSet[1:5,1:5]\ngeneSet <- t(tibble::column_to_rownames(geneSet,var = 'V1'))\ngene_list <- list()\nfor (i in colnames(geneSet)){\n  gene_list[[i]] <- geneSet[,i]\n  gene_list[[i]] <-gene_list[[i]][gene_list[[i]]!=''] \n}\n")),(0,l.kt)("p",null,"\u76f4\u63a5\u8bfb\u53d6\u7684 geneSet \u957f\u8fd9\u6837\uff0c\u6709\u7a7a\u503c\uff0c\u9700\u8981\u8f6c\u53d8\u6210 gene","_","list\uff0clist \u957f\u5ea6\u4e3a 28\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u67d0\u4e2a\u7ec6\u80de\u6240\u6709\u57fa\u56e0\u7684\u5411\u91cf\uff0c\u540d\u5b57\u662f\u5bf9\u5e94\u7684\u7ec6\u80de"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509185550240",src:a(2283).Z,width:"743",height:"471"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u8f7d\u5165\u8868\u8fbe\u77e9\u9635\uff0c\u628a\u8868\u8fbe\u77e9\u9635\u5206\u6210 high risk \u548c low risk \u7ec4\nload('TCGA_LUAD_TPM_exp.Rdata')\nload('risk.Rdata')\n\n# \u5bf9\u8868\u8fbe\u77e9\u9635\u53d6 log2\nexp <- log2(exp+0.00001)\nexp <- as.data.frame(exp)\n\ncolnames(exp) <- substr(colnames(exp),1,12)\nexp <- exp[,!duplicated(colnames(exp))]\nhigh_risk_sample <- km_data[km_data$risk=='high','ID']\nlow_risk_sample <- km_data[km_data$risk=='low','ID']\nhigh_risk_exp <- exp[,high_risk_sample]\nlow_risk_exp <- exp[,low_risk_sample]\n\n# ssGSEA\nhigh_risk_gsea <- gsva(high_risk_exp,gene_list,method='ssgsea',kcdf='Gaussian',abs.ranking=T)\nlow_risk_gsea <- gsva(low_risk_exp,gene_list,method='ssgsea',kcdf='Gaussian',abs.ranking=T)\n")),(0,l.kt)("p",null,"\u8981\u6ce8\u610f gsva \u51fd\u6570\u7684\u8f93\u5165\u5f97\u662f matrix\uff0c\u4e0d\u80fd\u662f data.frame\uff0c\u4e0d\u7136\u4f1a\u62a5\u9519"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"hr_gsea_norm <- high_risk_gsea\nfor (i in colnames(hr_gsea_norm)) {\n  diff <- max(hr_gsea_norm[,i] )-min(hr_gsea_norm[,i] )\n  hr_gsea_norm[,i] <- (hr_gsea_norm[,i] -min(hr_gsea_norm[,i]))/diff\n}\nhr_gsea_norm <- as.data.frame(t(hr_gsea_norm))\nhr_gsea_norm$type <- rep('high',times=nrow(hr_gsea_norm))\n\nlr_gsea_norm <- low_risk_gsea\nfor (i in colnames(lr_gsea_norm)) {\n  diff <- max(lr_gsea_norm[,i] )-min(lr_gsea_norm[,i])\n  lr_gsea_norm[,i] <- (lr_gsea_norm[,i] -min(lr_gsea_norm[,i]))/diff\n}\nlr_gsea_norm <- as.data.frame(t(lr_gsea_norm))\nlr_gsea_norm$type <- rep('low',times=nrow(lr_gsea_norm))\n\ngsea_norm <- rbind(hr_gsea_norm,lr_gsea_norm)\nlonger <- pivot_longer(gsea_norm,cols = !type,names_to = 'cell_type',values_to = 'Score')\n\nggplot(longer,aes(x=cell_type,y=Score,color=type))+geom_boxplot()+\n  theme(axis.text.x = element_text(angle = 45,hjust = 1))+\n  stat_compare_means(label = \"p.signif\",size=3,method = 'wilcox.test')\n")),(0,l.kt)("p",null,"\u5148\u628a high risk gsea \u548c low risk gsea \u7684\u6570\u636e\u5206\u522b\u8fdb\u884c min max scale\uff0c\u65b0\u589e\u4e00\u5217\u6807\u8bb0\u4e0a high \u548c low\uff0c\u7136\u540e\u5408\u5e76\u8d77\u6765\uff0c\u884c\u662f\u6837\u672c\uff0c\u5217\u662f\u7ec6\u80de\u3002\u518d\u628a\u900f\u89c6\u8868\u8f6c\u6210\u957f\u8868\uff0c\u5c31\u53ef\u4ee5\u753b\u56fe\u4e86"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509185611592",src:a(7025).Z,width:"743",height:"531"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-R"},"# \u514d\u75ab\u68c0\u67e5\u70b9&TBM\nrisk_exp <- as.data.frame(t(exp))\nrisk_exp <- risk_exp[km_data$ID,]\nrisk_exp$type <- km_data$risk\nrisk_exp <- risk_exp[,c('CD274','PDCD1','CTLA4','LAG3','TIGIT','type')]\nrisk_long <- pivot_longer(risk_exp,cols = !type,names_to = 'ICIs',values_to = 'Expression')\nggplot(risk_long,aes(x=ICIs,y=Expression,fill=type))+geom_boxplot()+\n  stat_compare_means(label = \"p.format\",size=3,method = 'wilcox.test')\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20230509185633127",src:a(4451).Z,width:"743",height:"527"})))}m.isMDXComponent=!0},2228:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509172810401-8aada8df4a2a25a7f31d029eb1446fac.png"},7598:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509173051298-5acf886a9e740674fce3022be1553b5a.png"},7232:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509173202048-35114e7bdbe24aee691ad42414079c81.png"},8413:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509173319035-ff4d4fabcdf9dd36a81e42957122836b.png"},3533:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509173416747-0ce5d14f50405774552fd04f86510153.png"},7715:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509173455682-40aa0dacb06c001070b07d89ba47fdc3.png"},855:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509173520803-281922742f22e1f2926660f699e2c749.png"},363:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509173607692-2503c8eadb15233253ad14e753336db1.png"},831:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509173852273-927e3c0d6c5d7c88557c3228fcfa7d8a.png"},476:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509174029821-62217b3f3c4b27910632649dab41794c.png"},3131:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509174111595-118c2aec5ac7cc1f83012707e80c32b4.png"},9017:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509174211956-7449305127e498f54bba72e7b0b8d1f4.png"},9297:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509175412678-9035d2cb8394bfc08a42636875b0dc7f.png"},8239:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509175509671-4b5b57a54fd4ce082b707234ec811798.png"},6284:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509175527871-884cb17837749eeffc3a0f71f90ea94b.png"},1073:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509175623495-93f9f0ae41db08ca6f7e5fe0472795f3.png"},1450:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509175922794-e15b8baba93868af1bdfc325292cf67e.png"},6968:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509175955369-fd70e0ed205ba80932727543ed5328d5.png"},1624:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509180121206-b576987f5ca1ed12cae42eff7e82cfcf.png"},9745:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509180142980-c391838fc7652f0e27bf0b0f0cb3d832.png"},4885:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509180204539-3f674c2271ecdfae5b92eb77c7182238.png"},2684:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509180239398-8e87c601259b13ab1f8f508d6c9b0a5c.png"},4530:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509180259854-e3e5b5830f42c1fa3d1c16824d7e0ba9.png"},1540:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509180315053-186633e8cf3a5b47335643b75673cef7.png"},130:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509180335465-89278be6620ad22dfe97f0fdf1fdc86b.png"},6208:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509180405685-54d450ca9a557198b402cf9c271d55df.png"},3565:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509184136135-8ff1f4eec5acbb47d03b54ad37c3dc13.png"},1917:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509184220708-f55306ba26b39b92784a368fe80f3217.png"},5762:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509184243649-98e4c41ecd7f13aebcd8f5831b530599.png"},4795:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509184310937-65f0003b4937014f9b63dc249d7711cb.png"},5395:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509184405897-034a0d5f9b5bcb78eafaf7672842dd10.png"},2259:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509184432644-eff505881be9cbcf479881ece10c2b43.png"},8559:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509184553116-7e2642d1b1039608fcf6da84e7584f79.png"},9329:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509184613334-d2a4823290a09a0871e7942ab593abc3.png"},2136:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509184731529-1ff4a12b475a511658b6a23ec340ec1d.png"},5937:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509184831481-f0bb5d74b31d53113229d00778cb8be6.png"},1586:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509184848098-ff586e81f0aae9e8c65943deda2fbad4.png"},4126:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509184928906-1ffbe0011d9e37d9075ca5263b3a4359.png"},2257:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509184951924-a578e93dc8e247c366c9a791b9017d22.png"},1860:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509185053953-8987ba1c815e0c0a9d33ccd0abd2e75b.png"},6969:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509185114933-ea1d84302de2426872586568cfd5f77a.png"},8953:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509185217444-ba871e9d1e7e4c0d7a1d2191cc5baf06.png"},5738:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509185244243-7b2b9ede72c60561af609c3710216301.png"},4553:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509185309625-4939cc341e6d9f98aeb89bae8574e497.png"},4504:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509185329453-223ced0598cb4d6c288b7991b6a3b738.png"},6796:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509185354749-588316ad581f51c25e2e7e25dea703f3.png"},1681:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509185420806-5e537d74a87e1a2d5eec52b986a3fbef.png"},7847:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509185458438-b1d15f4de9cf21a70c4b45a30731c90c.png"},2283:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509185550240-5e29866f751745e4d77bf5d0a2cfd934.png"},7025:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509185611592-c6ea283be60e70e9dd77be1fc0e5a80b.png"},4451:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/image-20230509185633127-d63daaf6acfe39a78b132b3b734f99df.png"}}]);